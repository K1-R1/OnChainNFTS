{
  "address": "0xcFDC1B0b7024269469d1d9C51978910aa487858e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LinkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "CreatedRandomSVGNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "CreatedUnfinishedRandomSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colours",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "finishMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_imageURI",
          "type": "string"
        }
      ],
      "name": "formatTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePath",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathSVG",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_command",
          "type": "string"
        }
      ],
      "name": "generatePathCommand",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathCommand",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "finalSVG",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPathCommands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPaths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pathCommands",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e5f30075c960c488c50c6eab64ee513af2609bbb8c98bd199a803c0d5edbd9a",
  "receipt": {
    "to": null,
    "from": "0xd6372663118c4acD85daB483d956CA5e7Aab3EaA",
    "contractAddress": "0xcFDC1B0b7024269469d1d9C51978910aa487858e",
    "transactionIndex": 4,
    "gasUsed": "4656417",
    "logsBloom": "0x
    "blockHash": "0xde4179a09e10361c5386c989a0d6f7d62cf084d4457ac022ef62fe526d0113ad",
    "transactionHash": "0x8e5f30075c960c488c50c6eab64ee513af2609bbb8c98bd199a803c0d5edbd9a",
    "logs": [],
    "blockNumber": 10238002,
    "cumulativeGasUsed": "5390661",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01be23585060835e02b77ef475b0cc51aa1e0709",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",
    "100000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9109b389a7ed0226e4ad7881767f06bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LinkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"CreatedRandomSVGNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"CreatedUnfinishedRandomSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colours\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"finishMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"name\":\"formatTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathSVG\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_command\",\"type\":\"string\"}],\"name\":\"generatePathCommand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathCommand\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"finalSVG\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPathCommands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPaths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathCommands\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomSVGNFT.sol\":\"RandomSVGNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/RandomSVGNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\ncontract RandomSVGNFT is ERC721URIStorage, VRFConsumerBase {\\r\\n    bytes32 public keyHash;\\r\\n    uint256 public fee;\\r\\n    uint256 public tokenCounter;\\r\\n\\r\\n    // SVG parameters\\r\\n    uint256 public maxPaths;\\r\\n    uint256 public maxPathCommands;\\r\\n    uint256 public size;\\r\\n\\r\\n    string[] public pathCommands;\\r\\n    string[] public colours;\\r\\n\\r\\n    mapping(bytes32 => address) public requestIdToSender;\\r\\n    mapping(bytes32 => uint256) public requestIdToTokenId;\\r\\n    mapping(uint256 => uint256) public tokenIdToRandomNumber;\\r\\n\\r\\n    event RequestedRandomSVG(\\r\\n        bytes32 indexed requestId,\\r\\n        uint256 indexed tokenId\\r\\n    );\\r\\n    event CreatedUnfinishedRandomSVG(\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 randomNumber\\r\\n    );\\r\\n    event CreatedRandomSVGNFT(uint256 indexed tokenId, string tokenURI);\\r\\n\\r\\n    constructor(\\r\\n        address _VRFCoordinator,\\r\\n        address _LinkToken,\\r\\n        bytes32 _keyhash,\\r\\n        uint256 _fee\\r\\n    )\\r\\n        VRFConsumerBase(_VRFCoordinator, _LinkToken)\\r\\n        ERC721(\\\"RandomSVGNFT\\\", \\\"rsNFT\\\")\\r\\n    {\\r\\n        keyHash = _keyhash;\\r\\n        fee = _fee;\\r\\n        tokenCounter = 0;\\r\\n        maxPaths = 10;\\r\\n        maxPathCommands = 5;\\r\\n        size = 500;\\r\\n        pathCommands = [\\\"M\\\", \\\"L\\\"];\\r\\n        colours = [\\r\\n            \\\"black\\\",\\r\\n            \\\"blue\\\",\\r\\n            \\\"red\\\",\\r\\n            \\\"green\\\",\\r\\n            \\\"yellow\\\",\\r\\n            \\\"purple\\\",\\r\\n            \\\"orange\\\"\\r\\n        ];\\r\\n    }\\r\\n\\r\\n    function create() public returns (bytes32 requestId) {\\r\\n        requestId = requestRandomness(keyHash, fee);\\r\\n        requestIdToSender[requestId] = msg.sender;\\r\\n        uint256 tokenId = tokenCounter;\\r\\n        requestIdToTokenId[requestId] = tokenId;\\r\\n        tokenCounter = tokenCounter + 1;\\r\\n        emit RequestedRandomSVG(requestId, tokenId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomness(bytes32 _requestId, uint256 _randomNumber)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        address nftOwner = requestIdToSender[_requestId];\\r\\n        uint256 tokenId = requestIdToTokenId[_requestId];\\r\\n        _safeMint(nftOwner, tokenId);\\r\\n        tokenIdToRandomNumber[tokenId] = _randomNumber;\\r\\n        emit CreatedUnfinishedRandomSVG(tokenId, _randomNumber);\\r\\n    }\\r\\n\\r\\n    function finishMint(uint256 _tokenId) public {\\r\\n        require(\\r\\n            bytes(tokenURI(_tokenId)).length == 0,\\r\\n            \\\"tokenURI is already set\\\"\\r\\n        );\\r\\n        require(tokenCounter > _tokenId, \\\"tokenId has not yet been minted\\\");\\r\\n        require(\\r\\n            tokenIdToRandomNumber[_tokenId] > 0,\\r\\n            \\\"Random number not yet recieved from VRF\\\"\\r\\n        );\\r\\n        uint256 randomNumber = tokenIdToRandomNumber[_tokenId];\\r\\n        string memory svg = generateSVG(randomNumber);\\r\\n        string memory imageURI = svgToImageURI(svg);\\r\\n        string memory _tokenURI = formatTokenURI(imageURI);\\r\\n        _setTokenURI(_tokenId, _tokenURI);\\r\\n        emit CreatedRandomSVGNFT(_tokenId, _tokenURI);\\r\\n    }\\r\\n\\r\\n    function generateSVG(uint256 _randomNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory finalSVG)\\r\\n    {\\r\\n        uint256 numberOfPaths = (_randomNumber % maxPaths) + 2;\\r\\n        finalSVG = string(\\r\\n            abi.encodePacked(\\r\\n                \\\"<svg xmlns='http://www.w3.org/2000/svg' height='\\\",\\r\\n                uint2str(size),\\r\\n                \\\"' width='\\\",\\r\\n                uint2str(size),\\r\\n                \\\"'>\\\"\\r\\n            )\\r\\n        );\\r\\n        for (uint256 i = 0; i < numberOfPaths; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, i)));\\r\\n            string memory pathSVG = generatePath(newRNG);\\r\\n            finalSVG = string(abi.encodePacked(finalSVG, pathSVG));\\r\\n        }\\r\\n        finalSVG = string(abi.encodePacked(finalSVG, \\\"</svg>\\\"));\\r\\n    }\\r\\n\\r\\n    function uint2str(uint256 _i)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory _uintAsString)\\r\\n    {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = _i;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    function generatePath(uint256 _randomNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory pathSVG)\\r\\n    {\\r\\n        uint256 numberOfPathCommands = (_randomNumber % maxPathCommands) + 2;\\r\\n        pathSVG = \\\"<path d='\\\";\\r\\n        //create M command\\r\\n        uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, size)));\\r\\n        string memory pathCommand = generatePathCommand(\\r\\n            newRNG,\\r\\n            pathCommands[0]\\r\\n        );\\r\\n        pathSVG = string(abi.encodePacked(pathSVG, pathCommand));\\r\\n        //random number of L commands\\r\\n        for (uint256 i = 0; i < numberOfPathCommands; i++) {\\r\\n            newRNG = uint256(keccak256(abi.encode(_randomNumber, size + i)));\\r\\n            pathCommand = generatePathCommand(newRNG, pathCommands[1]);\\r\\n            pathSVG = string(abi.encodePacked(pathSVG, pathCommand));\\r\\n        }\\r\\n        string memory colour = colours[_randomNumber % colours.length];\\r\\n        pathSVG = string(\\r\\n            abi.encodePacked(\\r\\n                pathSVG,\\r\\n                \\\"' fill='\\\",\\r\\n                colour,\\r\\n                \\\"' stroke='\\\",\\r\\n                colour,\\r\\n                \\\"'/>\\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function generatePathCommand(uint256 _randomNumber, string memory _command)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory pathCommand)\\r\\n    {\\r\\n        uint256 parameterOne = uint256(\\r\\n            keccak256(abi.encode(_randomNumber, size * 2))\\r\\n        ) % size;\\r\\n        uint256 parameterTwo = uint256(\\r\\n            keccak256(abi.encode(_randomNumber, size * 3))\\r\\n        ) % size;\\r\\n        pathCommand = string(\\r\\n            abi.encodePacked(\\r\\n                _command,\\r\\n                uint2str(parameterOne),\\r\\n                \\\" \\\",\\r\\n                uint2str(parameterTwo),\\r\\n                \\\" \\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function svgToImageURI(string memory _svg)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\r\\n        string memory svgBase64Encoded = Base64.encode(\\r\\n            bytes(string(abi.encodePacked(_svg)))\\r\\n        );\\r\\n        string memory imageURI = string(\\r\\n            abi.encodePacked(baseURL, svgBase64Encoded)\\r\\n        );\\r\\n        return imageURI;\\r\\n    }\\r\\n\\r\\n    function formatTokenURI(string memory _imageURI)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\":\\\"',\\r\\n                                \\\"SVG NFT\\\",\\r\\n                                '\\\", \\\"description\\\":\\\"An NFT based on SVG\\\", \\\"attributes\\\":\\\"\\\", \\\"image\\\":\\\"',\\r\\n                                _imageURI,\\r\\n                                '\\\"}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x70c4e4c0370b2daa0c8eaff5032fa1f8dac188da59a7323141171c1199049033\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200536c3803806200536c8339818101604052810190620000379190620005fe565b83836040518060400160405280600c81526020017f52616e646f6d5356474e465400000000000000000000000000000000000000008152506040518060400160405280600581526020017f72734e46540000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bd929190620003cd565b508060019080519060200190620000d6929190620003cd565b5050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505081600881905550806009819055506000600a81905550600a600b819055506005600c819055506101f4600d8190555060405180604001604052806040518060400160405280600181526020017f4d0000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600181526020017f4c00000000000000000000000000000000000000000000000000000000000000815250815250600e906002620002099291906200045e565b506040518060e001604052806040518060400160405280600581526020017f626c61636b00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f626c75650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f726564000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f677265656e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f79656c6c6f77000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f707572706c65000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f6f72616e67650000000000000000000000000000000000000000000000000000815250815250600f906007620003c2929190620004c5565b505050505062000765565b828054620003db90620006b2565b90600052602060002090601f016020900481019282620003ff57600085556200044b565b82601f106200041a57805160ff19168380011785556200044b565b828001600101855582156200044b579182015b828111156200044a5782518255916020019190600101906200042d565b5b5090506200045a91906200052c565b5090565b828054828255906000526020600020908101928215620004b2579160200282015b82811115620004b1578251829080519060200190620004a0929190620003cd565b50916020019190600101906200047f565b5b509050620004c191906200054b565b5090565b82805482825590600052602060002090810192821562000519579160200282015b828111156200051857825182908051906020019062000507929190620003cd565b5091602001919060010190620004e6565b5b5090506200052891906200054b565b5090565b5b80821115620005475760008160009055506001016200052d565b5090565b5b808211156200056f576000818162000565919062000573565b506001016200054c565b5090565b5080546200058190620006b2565b6000825580601f10620005955750620005b6565b601f016020900490600052602060002090810190620005b591906200052c565b5b50565b600081519050620005ca8162000717565b92915050565b600081519050620005e18162000731565b92915050565b600081519050620005f8816200074b565b92915050565b600080600080608085870312156200061557600080fd5b60006200062587828801620005b9565b94505060206200063887828801620005b9565b93505060406200064b87828801620005d0565b92505060606200065e87828801620005e7565b91505092959194509250565b6000620006778262000688565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006002820490506001821680620006cb57607f821691505b60208210811415620006e257620006e1620006e8565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b62000722816200066a565b81146200072e57600080fd5b50565b6200073c816200067e565b81146200074857600080fd5b50565b6200075681620006a8565b81146200076257600080fd5b50565b60805160601c60a05160601c614bd462000798600039600081816113630152612650015260006126140152614bd46000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806371aee1931161010f578063c76ab940116100a2578063ddca3f4311610071578063ddca3f431461063d578063df9bcd241461065b578063e985e9c514610679578063efc81a8c146106a9576101f0565b8063c76ab9401461058f578063c87b56dd146105bf578063ca0bc0ed146105ef578063d082e3811461061f576101f0565b806395d89b41116100de57806395d89b41146105095780639c1cd79514610527578063a22cb46514610557578063b88d4fde14610573576101f0565b806371aee1931461046f57806394985ddd1461049f578063949d225d146104bb578063955968d4146104d9576101f0565b806330d871c611610187578063624194c711610156578063624194c7146103c35780636352211e146103df5780636dcee4ca1461040f57806370a082311461043f576101f0565b806330d871c61461032957806333af59891461035957806342842e0e1461038957806361728f39146103a5576101f0565b8063095ea7b3116101c3578063095ea7b314610291578063219c0eee146102ad57806322881f88146102dd57806323b872dd1461030d576101f0565b806301f920c6146101f557806301ffc9a71461021357806306fdde0314610243578063081812fc14610261575b600080fd5b6101fd6106c7565b60405161020a9190613e37565b60405180910390f35b61022d600480360381019061022891906131e0565b6106cd565b60405161023a9190613af1565b60405180910390f35b61024b6107af565b6040516102589190613b95565b60405180910390f35b61027b60048036038101906102769190613273565b610841565b6040516102889190613a4c565b60405180910390f35b6102ab60048036038101906102a69190613116565b6108c6565b005b6102c760048036038101906102c2919061317b565b6109de565b6040516102d49190613a4c565b60405180910390f35b6102f760048036038101906102f2919061317b565b610a11565b6040516103049190613e37565b60405180910390f35b61032760048036038101906103229190613010565b610a29565b005b610343600480360381019061033e9190613232565b610a89565b6040516103509190613b95565b60405180910390f35b610373600480360381019061036e9190613273565b610b22565b6040516103809190613b95565b60405180910390f35b6103a3600480360381019061039e9190613010565b610f11565b005b6103ad610f31565b6040516103ba9190613b0c565b60405180910390f35b6103dd60048036038101906103d89190613273565b610f37565b005b6103f960048036038101906103f49190613273565b6110a5565b6040516104069190613a4c565b60405180910390f35b61042960048036038101906104249190613273565b611157565b6040516104369190613b95565b60405180910390f35b61045960048036038101906104549190612fab565b611259565b6040516104669190613e37565b60405180910390f35b61048960048036038101906104849190613232565b611311565b6040516104969190613b95565b60405180910390f35b6104b960048036038101906104b491906131a4565b611361565b005b6104c36113fd565b6040516104d09190613e37565b60405180910390f35b6104f360048036038101906104ee9190613273565b611403565b6040516105009190613b95565b60405180910390f35b6105116114af565b60405161051e9190613b95565b60405180910390f35b610541600480360381019061053c9190613273565b611541565b60405161054e9190613e37565b60405180910390f35b610571600480360381019061056c91906130da565b611559565b005b61058d6004803603810190610588919061305f565b61156f565b005b6105a960048036038101906105a49190613273565b6115d1565b6040516105b69190613b95565b60405180910390f35b6105d960048036038101906105d49190613273565b61167d565b6040516105e69190613b95565b60405180910390f35b6106096004803603810190610604919061329c565b6117cf565b6040516106169190613b95565b60405180910390f35b6106276118a5565b6040516106349190613e37565b60405180910390f35b6106456118ab565b6040516106529190613e37565b60405180910390f35b6106636118b1565b6040516106709190613e37565b60405180910390f35b610693600480360381019061068e9190612fd4565b6118b7565b6040516106a09190613af1565b60405180910390f35b6106b161194b565b6040516106be9190613b0c565b60405180910390f35b600b5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061079857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107a857506107a782611a15565b5b9050919050565b6060600080546107be9061415e565b80601f01602080910402602001604051908101604052809291908181526020018280546107ea9061415e565b80156108375780601f1061080c57610100808354040283529160200191610837565b820191906000526020600020905b81548152906001019060200180831161081a57829003601f168201915b5050505050905090565b600061084c82611a7f565b61088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290613d57565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108d1826110a5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093990613dd7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610961611aeb565b73ffffffffffffffffffffffffffffffffffffffff161480610990575061098f8161098a611aeb565b6118b7565b5b6109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c690613c97565b60405180910390fd5b6109d98383611af3565b505050565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60116020528060005260406000206000915090505481565b610a3a610a34611aeb565b82611bac565b610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7090613e17565b60405180910390fd5b610a84838383611c8a565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610aef84604051602001610adb91906138ac565b604051602081830303815290604052611ef1565b905060008282604051602001610b069291906138c3565b6040516020818303038152906040529050809350505050919050565b606060006002600c5484610b36919061421e565b610b409190613f45565b90506040518060400160405280600981526020017f3c7061746820643d2700000000000000000000000000000000000000000000008152509150600083600d54604051602001610b91929190613e52565b6040516020818303038152906040528051906020012060001c90506000610c8582600e600081548110610bed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018054610c029061415e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2e9061415e565b8015610c7b5780601f10610c5057610100808354040283529160200191610c7b565b820191906000526020600020905b815481529060010190602001808311610c5e57829003601f168201915b50505050506117cf565b90508381604051602001610c9a9291906138c3565b604051602081830303815290604052935060005b83811015610e01578581600d54610cc59190613f45565b604051602001610cd6929190613e52565b6040516020818303038152906040528051906020012060001c9250610dc883600e600181548110610d30577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018054610d459061415e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d719061415e565b8015610dbe5780601f10610d9357610100808354040283529160200191610dbe565b820191906000526020600020905b815481529060010190602001808311610da157829003601f168201915b50505050506117cf565b91508482604051602001610ddd9291906138c3565b60405160208183030381529060405294508080610df9906141c1565b915050610cae565b506000600f808054905087610e16919061421e565b81548110610e4d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018054610e629061415e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8e9061415e565b8015610edb5780601f10610eb057610100808354040283529160200191610edb565b820191906000526020600020905b815481529060010190602001808311610ebe57829003601f168201915b50505050509050848182604051602001610ef79392919061392e565b604051602081830303815290604052945050505050919050565b610f2c8383836040518060200160405280600081525061156f565b505050565b60085481565b6000610f428261167d565b5114610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90613c57565b60405180910390fd5b80600a5411610fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbe90613df7565b60405180910390fd5b600060126000838152602001908152602001600020541161101d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101490613d77565b60405180910390fd5b600060126000838152602001908152602001600020549050600061104082611157565b9050600061104d82610a89565b9050600061105a82611311565b90506110668582612090565b847fcb25abd690c2dce293e6237b33535facf92481a7036a95e95ff3977eeaa66688826040516110969190613b95565b60405180910390a25050505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561114e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114590613cd7565b60405180910390fd5b80915050919050565b606060006002600b548461116b919061421e565b6111759190613f45565b9050611182600d54612104565b61118d600d54612104565b60405160200161119e9291906139e5565b604051602081830303815290604052915060005b8181101561123057600084826040516020016111cf929190613e52565b6040516020818303038152906040528051906020012060001c905060006111f582610b22565b9050848160405160200161120a9291906138c3565b604051602081830303815290604052945050508080611228906141c1565b9150506111b2565b50816040516020016112429190613980565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c190613cb7565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606061133b8260405160200161132791906139a2565b604051602081830303815290604052611ef1565b60405160200161134b9190613a2a565b6040516020818303038152906040529050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e690613db7565b60405180910390fd5b6113f982826122d9565b5050565b600d5481565b600e818154811061141357600080fd5b90600052602060002001600091509050805461142e9061415e565b80601f016020809104026020016040519081016040528092919081815260200182805461145a9061415e565b80156114a75780601f1061147c576101008083540402835291602001916114a7565b820191906000526020600020905b81548152906001019060200180831161148a57829003601f168201915b505050505081565b6060600180546114be9061415e565b80601f01602080910402602001604051908101604052809291908181526020018280546114ea9061415e565b80156115375780601f1061150c57610100808354040283529160200191611537565b820191906000526020600020905b81548152906001019060200180831161151a57829003601f168201915b5050505050905090565b60126020528060005260406000206000915090505481565b61156b611564611aeb565b8383612389565b5050565b61158061157a611aeb565b83611bac565b6115bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b690613e17565b60405180910390fd5b6115cb848484846124f6565b50505050565b600f81815481106115e157600080fd5b9060005260206000200160009150905080546115fc9061415e565b80601f01602080910402602001604051908101604052809291908181526020018280546116289061415e565b80156116755780601f1061164a57610100808354040283529160200191611675565b820191906000526020600020905b81548152906001019060200180831161165857829003601f168201915b505050505081565b606061168882611a7f565b6116c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116be90613d37565b60405180910390fd5b60006006600084815260200190815260200160002080546116e79061415e565b80601f01602080910402602001604051908101604052809291908181526020018280546117139061415e565b80156117605780601f1061173557610100808354040283529160200191611760565b820191906000526020600020905b81548152906001019060200180831161174357829003601f168201915b505050505090506000611771612552565b90506000815114156117875781925050506117ca565b6000825111156117bc5780826040516020016117a49291906138c3565b604051602081830303815290604052925050506117ca565b6117c584612569565b925050505b919050565b60606000600d54846002600d546117e69190614003565b6040516020016117f7929190613e52565b6040516020818303038152906040528051906020012060001c61181a919061421e565b90506000600d54856003600d546118319190614003565b604051602001611842929190613e52565b6040516020818303038152906040528051906020012060001c611865919061421e565b90508361187183612104565b61187a83612104565b60405160200161188c939291906138e7565b6040516020818303038152906040529250505092915050565b600a5481565b60095481565b600c5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061195b600854600954612610565b9050336010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a5490508060116000848152602001908152602001600020819055506001600a546119dd9190613f45565b600a8190555080827fd18cd6f82baac9078af064ea020dd3dc7bff649bd8d50684f972d5995fec6e6960405160405180910390a35090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611b66836110a5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611bb782611a7f565b611bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bed90613c77565b60405180910390fd5b6000611c01836110a5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611c7057508373ffffffffffffffffffffffffffffffffffffffff16611c5884610841565b73ffffffffffffffffffffffffffffffffffffffff16145b80611c815750611c8081856118b7565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611caa826110a5565b73ffffffffffffffffffffffffffffffffffffffff1614611d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf790613bd7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6790613c17565b60405180910390fd5b611d7b838383612772565b611d86600082611af3565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dd6919061405d565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e2d9190613f45565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611eec838383612777565b505050565b6060600082511415611f145760405180602001604052806000815250905061208b565b6000604051806060016040528060408152602001614b5f6040913990506000600360028551611f439190613f45565b611f4d9190613fd2565b6004611f599190614003565b90506000602082611f6a9190613f45565b67ffffffffffffffff811115611fa9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611fdb5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b8183101561204a576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611fef565b60038951066001811461206457600281146120745761207f565b613d3d60f01b600283035261207f565b603d60f81b60018303525b50505050508093505050505b919050565b61209982611a7f565b6120d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cf90613cf7565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906120ff929190612da5565b505050565b6060600082141561214c576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506122d4565b600082905060005b6000821461217e578080612167906141c1565b915050600a826121779190613fd2565b9150612154565b60008167ffffffffffffffff8111156121c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121f25781602001600182028036833780820191505090505b50905060008290505b600086146122cc57600181612210919061405d565b90506000600a80886122229190613fd2565b61222c9190614003565b87612237919061405d565b60306122439190613f9b565b905060008160f81b905080848481518110612287577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886122c39190613fd2565b975050506121fb565b819450505050505b919050565b60006010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060116000858152602001908152602001600020549050612333828261277c565b826012600083815260200190815260200160002081905550807faad5362ce528ed941024b95d4c18dfd49b8503e1f586a5c353631d98c2af41b78460405161237b9190613e37565b60405180910390a250505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156123f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ef90613c37565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124e99190613af1565b60405180910390a3505050565b612501848484611c8a565b61250d8484848461279a565b61254c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254390613bb7565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061257482611a7f565b6125b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125aa90613d97565b60405180910390fd5b60006125bd612552565b905060008151116125dd5760405180602001604052806000815250612608565b806125e784612931565b6040516020016125f89291906138c3565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001612684929190613b27565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016126b193929190613ab3565b602060405180830381600087803b1580156126cb57600080fd5b505af11580156126df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127039190613152565b506000612726846000306007600089815260200190815260200160002054612ade565b9050600160076000868152602001908152602001600020546127489190613f45565b60076000868152602001908152602001600020819055506127698482612b1a565b91505092915050565b505050565b505050565b612796828260405180602001604052806000815250612b4d565b5050565b60006127bb8473ffffffffffffffffffffffffffffffffffffffff16612ba8565b15612924578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026127e4611aeb565b8786866040518563ffffffff1660e01b81526004016128069493929190613a67565b602060405180830381600087803b15801561282057600080fd5b505af192505050801561285157506040513d601f19601f8201168201806040525081019061284e9190613209565b60015b6128d4573d8060008114612881576040519150601f19603f3d011682016040523d82523d6000602084013e612886565b606091505b506000815114156128cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c390613bb7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612929565b600190505b949350505050565b60606000821415612979576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612ad9565b600082905060005b600082146129ab578080612994906141c1565b915050600a826129a49190613fd2565b9150612981565b60008167ffffffffffffffff8111156129ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a1f5781602001600182028036833780820191505090505b5090505b60008514612ad257600182612a38919061405d565b9150600a85612a47919061421e565b6030612a539190613f45565b60f81b818381518110612a8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612acb9190613fd2565b9450612a23565b8093505050505b919050565b600084848484604051602001612af79493929190613b50565b6040516020818303038152906040528051906020012060001c9050949350505050565b60008282604051602001612b2f929190613880565b60405160208183030381529060405280519060200120905092915050565b612b578383612bcb565b612b64600084848461279a565b612ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9a90613bb7565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3290613d17565b60405180910390fd5b612c4481611a7f565b15612c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7b90613bf7565b60405180910390fd5b612c9060008383612772565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ce09190613f45565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612da160008383612777565b5050565b828054612db19061415e565b90600052602060002090601f016020900481019282612dd35760008555612e1a565b82601f10612dec57805160ff1916838001178555612e1a565b82800160010185558215612e1a579182015b82811115612e19578251825591602001919060010190612dfe565b5b509050612e279190612e2b565b5090565b5b80821115612e44576000816000905550600101612e2c565b5090565b6000612e5b612e5684613ea0565b613e7b565b905082815260208101848484011115612e7357600080fd5b612e7e84828561411c565b509392505050565b6000612e99612e9484613ed1565b613e7b565b905082815260208101848484011115612eb157600080fd5b612ebc84828561411c565b509392505050565b600081359050612ed381614aeb565b92915050565b600081359050612ee881614b02565b92915050565b600081519050612efd81614b02565b92915050565b600081359050612f1281614b19565b92915050565b600081359050612f2781614b30565b92915050565b600081519050612f3c81614b30565b92915050565b600082601f830112612f5357600080fd5b8135612f63848260208601612e48565b91505092915050565b600082601f830112612f7d57600080fd5b8135612f8d848260208601612e86565b91505092915050565b600081359050612fa581614b47565b92915050565b600060208284031215612fbd57600080fd5b6000612fcb84828501612ec4565b91505092915050565b60008060408385031215612fe757600080fd5b6000612ff585828601612ec4565b925050602061300685828601612ec4565b9150509250929050565b60008060006060848603121561302557600080fd5b600061303386828701612ec4565b935050602061304486828701612ec4565b925050604061305586828701612f96565b9150509250925092565b6000806000806080858703121561307557600080fd5b600061308387828801612ec4565b945050602061309487828801612ec4565b93505060406130a587828801612f96565b925050606085013567ffffffffffffffff8111156130c257600080fd5b6130ce87828801612f42565b91505092959194509250565b600080604083850312156130ed57600080fd5b60006130fb85828601612ec4565b925050602061310c85828601612ed9565b9150509250929050565b6000806040838503121561312957600080fd5b600061313785828601612ec4565b925050602061314885828601612f96565b9150509250929050565b60006020828403121561316457600080fd5b600061317284828501612eee565b91505092915050565b60006020828403121561318d57600080fd5b600061319b84828501612f03565b91505092915050565b600080604083850312156131b757600080fd5b60006131c585828601612f03565b92505060206131d685828601612f96565b9150509250929050565b6000602082840312156131f257600080fd5b600061320084828501612f18565b91505092915050565b60006020828403121561321b57600080fd5b600061322984828501612f2d565b91505092915050565b60006020828403121561324457600080fd5b600082013567ffffffffffffffff81111561325e57600080fd5b61326a84828501612f6c565b91505092915050565b60006020828403121561328557600080fd5b600061329384828501612f96565b91505092915050565b600080604083850312156132af57600080fd5b60006132bd85828601612f96565b925050602083013567ffffffffffffffff8111156132da57600080fd5b6132e685828601612f6c565b9150509250929050565b6132f981614091565b82525050565b613308816140a3565b82525050565b613317816140af565b82525050565b61332e613329826140af565b61420a565b82525050565b600061333f82613f02565b6133498185613f18565b935061335981856020860161412b565b6133628161430b565b840191505092915050565b600061337882613f0d565b6133828185613f29565b935061339281856020860161412b565b61339b8161430b565b840191505092915050565b60006133b182613f0d565b6133bb8185613f3a565b93506133cb81856020860161412b565b80840191505092915050565b60006133e4600983613f3a565b91506133ef8261431c565b600982019050919050565b6000613407603283613f29565b915061341282614345565b604082019050919050565b600061342a602583613f29565b915061343582614394565b604082019050919050565b600061344d601c83613f29565b9150613458826143e3565b602082019050919050565b6000613470600883613f3a565b915061347b8261440c565b600882019050919050565b6000613493600a83613f3a565b915061349e82614435565b600a82019050919050565b60006134b6602483613f29565b91506134c18261445e565b604082019050919050565b60006134d9601983613f29565b91506134e4826144ad565b602082019050919050565b60006134fc601783613f29565b9150613507826144d6565b602082019050919050565b600061351f602c83613f29565b915061352a826144ff565b604082019050919050565b6000613542600183613f3a565b915061354d8261454e565b600182019050919050565b6000613565600383613f3a565b915061357082614577565b600382019050919050565b6000613588600783613f3a565b9150613593826145a0565b600782019050919050565b60006135ab603883613f29565b91506135b6826145c9565b604082019050919050565b60006135ce602a83613f29565b91506135d982614618565b604082019050919050565b60006135f1602983613f29565b91506135fc82614667565b604082019050919050565b6000613614602e83613f29565b915061361f826146b6565b604082019050919050565b6000613637600283613f3a565b915061364282614705565b600282019050919050565b600061365a602083613f29565b91506136658261472e565b602082019050919050565b600061367d603183613f29565b915061368882614757565b604082019050919050565b60006136a0602c83613f29565b91506136ab826147a6565b604082019050919050565b60006136c3602783613f29565b91506136ce826147f5565b604082019050919050565b60006136e6603083613f3a565b91506136f182614844565b603082019050919050565b6000613709602f83613f29565b915061371482614893565b604082019050919050565b600061372c601f83613f29565b9150613737826148e2565b602082019050919050565b600061374f604283613f3a565b915061375a8261490b565b604282019050919050565b6000613772602183613f29565b915061377d82614980565b604082019050919050565b6000613795601d83613f3a565b91506137a0826149cf565b601d82019050919050565b60006137b8601f83613f29565b91506137c3826149f8565b602082019050919050565b60006137db603183613f29565b91506137e682614a21565b604082019050919050565b60006137fe600283613f3a565b915061380982614a70565b600282019050919050565b6000613821600683613f3a565b915061382c82614a99565b600682019050919050565b6000613844600983613f3a565b915061384f82614ac2565b600982019050919050565b61386381614105565b82525050565b61387a61387582614105565b614214565b82525050565b600061388c828561331d565b60208201915061389c8284613869565b6020820191508190509392505050565b60006138b882846133a6565b915081905092915050565b60006138cf82856133a6565b91506138db82846133a6565b91508190509392505050565b60006138f382866133a6565b91506138ff82856133a6565b915061390a82613535565b915061391682846133a6565b915061392182613535565b9150819050949350505050565b600061393a82866133a6565b915061394582613463565b915061395182856133a6565b915061395c82613486565b915061396882846133a6565b915061397382613558565b9150819050949350505050565b600061398c82846133a6565b915061399782613814565b915081905092915050565b60006139ad826133d7565b91506139b88261357b565b91506139c382613742565b91506139cf82846133a6565b91506139da8261362a565b915081905092915050565b60006139f0826136d9565b91506139fc82856133a6565b9150613a0782613837565b9150613a1382846133a6565b9150613a1e826137f1565b91508190509392505050565b6000613a3582613788565b9150613a4182846133a6565b915081905092915050565b6000602082019050613a6160008301846132f0565b92915050565b6000608082019050613a7c60008301876132f0565b613a8960208301866132f0565b613a96604083018561385a565b8181036060830152613aa88184613334565b905095945050505050565b6000606082019050613ac860008301866132f0565b613ad5602083018561385a565b8181036040830152613ae78184613334565b9050949350505050565b6000602082019050613b0660008301846132ff565b92915050565b6000602082019050613b21600083018461330e565b92915050565b6000604082019050613b3c600083018561330e565b613b49602083018461385a565b9392505050565b6000608082019050613b65600083018761330e565b613b72602083018661385a565b613b7f60408301856132f0565b613b8c606083018461385a565b95945050505050565b60006020820190508181036000830152613baf818461336d565b905092915050565b60006020820190508181036000830152613bd0816133fa565b9050919050565b60006020820190508181036000830152613bf08161341d565b9050919050565b60006020820190508181036000830152613c1081613440565b9050919050565b60006020820190508181036000830152613c30816134a9565b9050919050565b60006020820190508181036000830152613c50816134cc565b9050919050565b60006020820190508181036000830152613c70816134ef565b9050919050565b60006020820190508181036000830152613c9081613512565b9050919050565b60006020820190508181036000830152613cb08161359e565b9050919050565b60006020820190508181036000830152613cd0816135c1565b9050919050565b60006020820190508181036000830152613cf0816135e4565b9050919050565b60006020820190508181036000830152613d1081613607565b9050919050565b60006020820190508181036000830152613d308161364d565b9050919050565b60006020820190508181036000830152613d5081613670565b9050919050565b60006020820190508181036000830152613d7081613693565b9050919050565b60006020820190508181036000830152613d90816136b6565b9050919050565b60006020820190508181036000830152613db0816136fc565b9050919050565b60006020820190508181036000830152613dd08161371f565b9050919050565b60006020820190508181036000830152613df081613765565b9050919050565b60006020820190508181036000830152613e10816137ab565b9050919050565b60006020820190508181036000830152613e30816137ce565b9050919050565b6000602082019050613e4c600083018461385a565b92915050565b6000604082019050613e67600083018561385a565b613e74602083018461385a565b9392505050565b6000613e85613e96565b9050613e918282614190565b919050565b6000604051905090565b600067ffffffffffffffff821115613ebb57613eba6142dc565b5b613ec48261430b565b9050602081019050919050565b600067ffffffffffffffff821115613eec57613eeb6142dc565b5b613ef58261430b565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613f5082614105565b9150613f5b83614105565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f9057613f8f61424f565b5b828201905092915050565b6000613fa68261410f565b9150613fb18361410f565b92508260ff03821115613fc757613fc661424f565b5b828201905092915050565b6000613fdd82614105565b9150613fe883614105565b925082613ff857613ff761427e565b5b828204905092915050565b600061400e82614105565b915061401983614105565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156140525761405161424f565b5b828202905092915050565b600061406882614105565b915061407383614105565b9250828210156140865761408561424f565b5b828203905092915050565b600061409c826140e5565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561414957808201518184015260208101905061412e565b83811115614158576000848401525b50505050565b6000600282049050600182168061417657607f821691505b6020821081141561418a576141896142ad565b5b50919050565b6141998261430b565b810181811067ffffffffffffffff821117156141b8576141b76142dc565b5b80604052505050565b60006141cc82614105565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156141ff576141fe61424f565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061422982614105565b915061423483614105565b9250826142445761424361427e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f272066696c6c3d27000000000000000000000000000000000000000000000000600082015250565b7f27207374726f6b653d2700000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f746f6b656e55524920697320616c726561647920736574000000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f272f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f535647204e465400000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f52616e646f6d206e756d626572206e6f7420796574207265636965766564206660008201527f726f6d2056524600000000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766727206865696768743d2700000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f222c20226465736372697074696f6e223a22416e204e4654206261736564206f60008201527f6e20535647222c202261747472696275746573223a22222c2022696d6167652260208201527f3a22000000000000000000000000000000000000000000000000000000000000604082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f746f6b656e496420686173206e6f7420796574206265656e206d696e74656400600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f273e000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f272077696474683d270000000000000000000000000000000000000000000000600082015250565b614af481614091565b8114614aff57600080fd5b50565b614b0b816140a3565b8114614b1657600080fd5b50565b614b22816140af565b8114614b2d57600080fd5b50565b614b39816140b9565b8114614b4457600080fd5b50565b614b5081614105565b8114614b5b57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220ed0bfcefbaa9644f601ee1d3674ad145568ae59bf065c3da38e8e5197b1b562e64736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806371aee1931161010f578063c76ab940116100a2578063ddca3f4311610071578063ddca3f431461063d578063df9bcd241461065b578063e985e9c514610679578063efc81a8c146106a9576101f0565b8063c76ab9401461058f578063c87b56dd146105bf578063ca0bc0ed146105ef578063d082e3811461061f576101f0565b806395d89b41116100de57806395d89b41146105095780639c1cd79514610527578063a22cb46514610557578063b88d4fde14610573576101f0565b806371aee1931461046f57806394985ddd1461049f578063949d225d146104bb578063955968d4146104d9576101f0565b806330d871c611610187578063624194c711610156578063624194c7146103c35780636352211e146103df5780636dcee4ca1461040f57806370a082311461043f576101f0565b806330d871c61461032957806333af59891461035957806342842e0e1461038957806361728f39146103a5576101f0565b8063095ea7b3116101c3578063095ea7b314610291578063219c0eee146102ad57806322881f88146102dd57806323b872dd1461030d576101f0565b806301f920c6146101f557806301ffc9a71461021357806306fdde0314610243578063081812fc14610261575b600080fd5b6101fd6106c7565b60405161020a9190613e37565b60405180910390f35b61022d600480360381019061022891906131e0565b6106cd565b60405161023a9190613af1565b60405180910390f35b61024b6107af565b6040516102589190613b95565b60405180910390f35b61027b60048036038101906102769190613273565b610841565b6040516102889190613a4c565b60405180910390f35b6102ab60048036038101906102a69190613116565b6108c6565b005b6102c760048036038101906102c2919061317b565b6109de565b6040516102d49190613a4c565b60405180910390f35b6102f760048036038101906102f2919061317b565b610a11565b6040516103049190613e37565b60405180910390f35b61032760048036038101906103229190613010565b610a29565b005b610343600480360381019061033e9190613232565b610a89565b6040516103509190613b95565b60405180910390f35b610373600480360381019061036e9190613273565b610b22565b6040516103809190613b95565b60405180910390f35b6103a3600480360381019061039e9190613010565b610f11565b005b6103ad610f31565b6040516103ba9190613b0c565b60405180910390f35b6103dd60048036038101906103d89190613273565b610f37565b005b6103f960048036038101906103f49190613273565b6110a5565b6040516104069190613a4c565b60405180910390f35b61042960048036038101906104249190613273565b611157565b6040516104369190613b95565b60405180910390f35b61045960048036038101906104549190612fab565b611259565b6040516104669190613e37565b60405180910390f35b61048960048036038101906104849190613232565b611311565b6040516104969190613b95565b60405180910390f35b6104b960048036038101906104b491906131a4565b611361565b005b6104c36113fd565b6040516104d09190613e37565b60405180910390f35b6104f360048036038101906104ee9190613273565b611403565b6040516105009190613b95565b60405180910390f35b6105116114af565b60405161051e9190613b95565b60405180910390f35b610541600480360381019061053c9190613273565b611541565b60405161054e9190613e37565b60405180910390f35b610571600480360381019061056c91906130da565b611559565b005b61058d6004803603810190610588919061305f565b61156f565b005b6105a960048036038101906105a49190613273565b6115d1565b6040516105b69190613b95565b60405180910390f35b6105d960048036038101906105d49190613273565b61167d565b6040516105e69190613b95565b60405180910390f35b6106096004803603810190610604919061329c565b6117cf565b6040516106169190613b95565b60405180910390f35b6106276118a5565b6040516106349190613e37565b60405180910390f35b6106456118ab565b6040516106529190613e37565b60405180910390f35b6106636118b1565b6040516106709190613e37565b60405180910390f35b610693600480360381019061068e9190612fd4565b6118b7565b6040516106a09190613af1565b60405180910390f35b6106b161194b565b6040516106be9190613b0c565b60405180910390f35b600b5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061079857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107a857506107a782611a15565b5b9050919050565b6060600080546107be9061415e565b80601f01602080910402602001604051908101604052809291908181526020018280546107ea9061415e565b80156108375780601f1061080c57610100808354040283529160200191610837565b820191906000526020600020905b81548152906001019060200180831161081a57829003601f168201915b5050505050905090565b600061084c82611a7f565b61088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290613d57565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108d1826110a5565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093990613dd7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610961611aeb565b73ffffffffffffffffffffffffffffffffffffffff161480610990575061098f8161098a611aeb565b6118b7565b5b6109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c690613c97565b60405180910390fd5b6109d98383611af3565b505050565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60116020528060005260406000206000915090505481565b610a3a610a34611aeb565b82611bac565b610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7090613e17565b60405180910390fd5b610a84838383611c8a565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610aef84604051602001610adb91906138ac565b604051602081830303815290604052611ef1565b905060008282604051602001610b069291906138c3565b6040516020818303038152906040529050809350505050919050565b606060006002600c5484610b36919061421e565b610b409190613f45565b90506040518060400160405280600981526020017f3c7061746820643d2700000000000000000000000000000000000000000000008152509150600083600d54604051602001610b91929190613e52565b6040516020818303038152906040528051906020012060001c90506000610c8582600e600081548110610bed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018054610c029061415e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2e9061415e565b8015610c7b5780601f10610c5057610100808354040283529160200191610c7b565b820191906000526020600020905b815481529060010190602001808311610c5e57829003601f168201915b50505050506117cf565b90508381604051602001610c9a9291906138c3565b604051602081830303815290604052935060005b83811015610e01578581600d54610cc59190613f45565b604051602001610cd6929190613e52565b6040516020818303038152906040528051906020012060001c9250610dc883600e600181548110610d30577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018054610d459061415e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d719061415e565b8015610dbe5780601f10610d9357610100808354040283529160200191610dbe565b820191906000526020600020905b815481529060010190602001808311610da157829003601f168201915b50505050506117cf565b91508482604051602001610ddd9291906138c3565b60405160208183030381529060405294508080610df9906141c1565b915050610cae565b506000600f808054905087610e16919061421e565b81548110610e4d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018054610e629061415e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e8e9061415e565b8015610edb5780601f10610eb057610100808354040283529160200191610edb565b820191906000526020600020905b815481529060010190602001808311610ebe57829003601f168201915b50505050509050848182604051602001610ef79392919061392e565b604051602081830303815290604052945050505050919050565b610f2c8383836040518060200160405280600081525061156f565b505050565b60085481565b6000610f428261167d565b5114610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90613c57565b60405180910390fd5b80600a5411610fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbe90613df7565b60405180910390fd5b600060126000838152602001908152602001600020541161101d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101490613d77565b60405180910390fd5b600060126000838152602001908152602001600020549050600061104082611157565b9050600061104d82610a89565b9050600061105a82611311565b90506110668582612090565b847fcb25abd690c2dce293e6237b33535facf92481a7036a95e95ff3977eeaa66688826040516110969190613b95565b60405180910390a25050505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561114e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114590613cd7565b60405180910390fd5b80915050919050565b606060006002600b548461116b919061421e565b6111759190613f45565b9050611182600d54612104565b61118d600d54612104565b60405160200161119e9291906139e5565b604051602081830303815290604052915060005b8181101561123057600084826040516020016111cf929190613e52565b6040516020818303038152906040528051906020012060001c905060006111f582610b22565b9050848160405160200161120a9291906138c3565b604051602081830303815290604052945050508080611228906141c1565b9150506111b2565b50816040516020016112429190613980565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156112ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c190613cb7565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606061133b8260405160200161132791906139a2565b604051602081830303815290604052611ef1565b60405160200161134b9190613a2a565b6040516020818303038152906040529050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e690613db7565b60405180910390fd5b6113f982826122d9565b5050565b600d5481565b600e818154811061141357600080fd5b90600052602060002001600091509050805461142e9061415e565b80601f016020809104026020016040519081016040528092919081815260200182805461145a9061415e565b80156114a75780601f1061147c576101008083540402835291602001916114a7565b820191906000526020600020905b81548152906001019060200180831161148a57829003601f168201915b505050505081565b6060600180546114be9061415e565b80601f01602080910402602001604051908101604052809291908181526020018280546114ea9061415e565b80156115375780601f1061150c57610100808354040283529160200191611537565b820191906000526020600020905b81548152906001019060200180831161151a57829003601f168201915b5050505050905090565b60126020528060005260406000206000915090505481565b61156b611564611aeb565b8383612389565b5050565b61158061157a611aeb565b83611bac565b6115bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b690613e17565b60405180910390fd5b6115cb848484846124f6565b50505050565b600f81815481106115e157600080fd5b9060005260206000200160009150905080546115fc9061415e565b80601f01602080910402602001604051908101604052809291908181526020018280546116289061415e565b80156116755780601f1061164a57610100808354040283529160200191611675565b820191906000526020600020905b81548152906001019060200180831161165857829003601f168201915b505050505081565b606061168882611a7f565b6116c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116be90613d37565b60405180910390fd5b60006006600084815260200190815260200160002080546116e79061415e565b80601f01602080910402602001604051908101604052809291908181526020018280546117139061415e565b80156117605780601f1061173557610100808354040283529160200191611760565b820191906000526020600020905b81548152906001019060200180831161174357829003601f168201915b505050505090506000611771612552565b90506000815114156117875781925050506117ca565b6000825111156117bc5780826040516020016117a49291906138c3565b604051602081830303815290604052925050506117ca565b6117c584612569565b925050505b919050565b60606000600d54846002600d546117e69190614003565b6040516020016117f7929190613e52565b6040516020818303038152906040528051906020012060001c61181a919061421e565b90506000600d54856003600d546118319190614003565b604051602001611842929190613e52565b6040516020818303038152906040528051906020012060001c611865919061421e565b90508361187183612104565b61187a83612104565b60405160200161188c939291906138e7565b6040516020818303038152906040529250505092915050565b600a5481565b60095481565b600c5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061195b600854600954612610565b9050336010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a5490508060116000848152602001908152602001600020819055506001600a546119dd9190613f45565b600a8190555080827fd18cd6f82baac9078af064ea020dd3dc7bff649bd8d50684f972d5995fec6e6960405160405180910390a35090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611b66836110a5565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611bb782611a7f565b611bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bed90613c77565b60405180910390fd5b6000611c01836110a5565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611c7057508373ffffffffffffffffffffffffffffffffffffffff16611c5884610841565b73ffffffffffffffffffffffffffffffffffffffff16145b80611c815750611c8081856118b7565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611caa826110a5565b73ffffffffffffffffffffffffffffffffffffffff1614611d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf790613bd7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6790613c17565b60405180910390fd5b611d7b838383612772565b611d86600082611af3565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dd6919061405d565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e2d9190613f45565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611eec838383612777565b505050565b6060600082511415611f145760405180602001604052806000815250905061208b565b6000604051806060016040528060408152602001614b5f6040913990506000600360028551611f439190613f45565b611f4d9190613fd2565b6004611f599190614003565b90506000602082611f6a9190613f45565b67ffffffffffffffff811115611fa9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611fdb5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b8183101561204a576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611fef565b60038951066001811461206457600281146120745761207f565b613d3d60f01b600283035261207f565b603d60f81b60018303525b50505050508093505050505b919050565b61209982611a7f565b6120d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120cf90613cf7565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906120ff929190612da5565b505050565b6060600082141561214c576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506122d4565b600082905060005b6000821461217e578080612167906141c1565b915050600a826121779190613fd2565b9150612154565b60008167ffffffffffffffff8111156121c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121f25781602001600182028036833780820191505090505b50905060008290505b600086146122cc57600181612210919061405d565b90506000600a80886122229190613fd2565b61222c9190614003565b87612237919061405d565b60306122439190613f9b565b905060008160f81b905080848481518110612287577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886122c39190613fd2565b975050506121fb565b819450505050505b919050565b60006010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060116000858152602001908152602001600020549050612333828261277c565b826012600083815260200190815260200160002081905550807faad5362ce528ed941024b95d4c18dfd49b8503e1f586a5c353631d98c2af41b78460405161237b9190613e37565b60405180910390a250505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156123f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ef90613c37565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124e99190613af1565b60405180910390a3505050565b612501848484611c8a565b61250d8484848461279a565b61254c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254390613bb7565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061257482611a7f565b6125b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125aa90613d97565b60405180910390fd5b60006125bd612552565b905060008151116125dd5760405180602001604052806000815250612608565b806125e784612931565b6040516020016125f89291906138c3565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f000000000000000000000000000000000000000000000000000000000000000084866000604051602001612684929190613b27565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016126b193929190613ab3565b602060405180830381600087803b1580156126cb57600080fd5b505af11580156126df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127039190613152565b506000612726846000306007600089815260200190815260200160002054612ade565b9050600160076000868152602001908152602001600020546127489190613f45565b60076000868152602001908152602001600020819055506127698482612b1a565b91505092915050565b505050565b505050565b612796828260405180602001604052806000815250612b4d565b5050565b60006127bb8473ffffffffffffffffffffffffffffffffffffffff16612ba8565b15612924578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026127e4611aeb565b8786866040518563ffffffff1660e01b81526004016128069493929190613a67565b602060405180830381600087803b15801561282057600080fd5b505af192505050801561285157506040513d601f19601f8201168201806040525081019061284e9190613209565b60015b6128d4573d8060008114612881576040519150601f19603f3d011682016040523d82523d6000602084013e612886565b606091505b506000815114156128cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128c390613bb7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612929565b600190505b949350505050565b60606000821415612979576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612ad9565b600082905060005b600082146129ab578080612994906141c1565b915050600a826129a49190613fd2565b9150612981565b60008167ffffffffffffffff8111156129ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a1f5781602001600182028036833780820191505090505b5090505b60008514612ad257600182612a38919061405d565b9150600a85612a47919061421e565b6030612a539190613f45565b60f81b818381518110612a8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612acb9190613fd2565b9450612a23565b8093505050505b919050565b600084848484604051602001612af79493929190613b50565b6040516020818303038152906040528051906020012060001c9050949350505050565b60008282604051602001612b2f929190613880565b60405160208183030381529060405280519060200120905092915050565b612b578383612bcb565b612b64600084848461279a565b612ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b9a90613bb7565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c3290613d17565b60405180910390fd5b612c4481611a7f565b15612c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7b90613bf7565b60405180910390fd5b612c9060008383612772565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ce09190613f45565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612da160008383612777565b5050565b828054612db19061415e565b90600052602060002090601f016020900481019282612dd35760008555612e1a565b82601f10612dec57805160ff1916838001178555612e1a565b82800160010185558215612e1a579182015b82811115612e19578251825591602001919060010190612dfe565b5b509050612e279190612e2b565b5090565b5b80821115612e44576000816000905550600101612e2c565b5090565b6000612e5b612e5684613ea0565b613e7b565b905082815260208101848484011115612e7357600080fd5b612e7e84828561411c565b509392505050565b6000612e99612e9484613ed1565b613e7b565b905082815260208101848484011115612eb157600080fd5b612ebc84828561411c565b509392505050565b600081359050612ed381614aeb565b92915050565b600081359050612ee881614b02565b92915050565b600081519050612efd81614b02565b92915050565b600081359050612f1281614b19565b92915050565b600081359050612f2781614b30565b92915050565b600081519050612f3c81614b30565b92915050565b600082601f830112612f5357600080fd5b8135612f63848260208601612e48565b91505092915050565b600082601f830112612f7d57600080fd5b8135612f8d848260208601612e86565b91505092915050565b600081359050612fa581614b47565b92915050565b600060208284031215612fbd57600080fd5b6000612fcb84828501612ec4565b91505092915050565b60008060408385031215612fe757600080fd5b6000612ff585828601612ec4565b925050602061300685828601612ec4565b9150509250929050565b60008060006060848603121561302557600080fd5b600061303386828701612ec4565b935050602061304486828701612ec4565b925050604061305586828701612f96565b9150509250925092565b6000806000806080858703121561307557600080fd5b600061308387828801612ec4565b945050602061309487828801612ec4565b93505060406130a587828801612f96565b925050606085013567ffffffffffffffff8111156130c257600080fd5b6130ce87828801612f42565b91505092959194509250565b600080604083850312156130ed57600080fd5b60006130fb85828601612ec4565b925050602061310c85828601612ed9565b9150509250929050565b6000806040838503121561312957600080fd5b600061313785828601612ec4565b925050602061314885828601612f96565b9150509250929050565b60006020828403121561316457600080fd5b600061317284828501612eee565b91505092915050565b60006020828403121561318d57600080fd5b600061319b84828501612f03565b91505092915050565b600080604083850312156131b757600080fd5b60006131c585828601612f03565b92505060206131d685828601612f96565b9150509250929050565b6000602082840312156131f257600080fd5b600061320084828501612f18565b91505092915050565b60006020828403121561321b57600080fd5b600061322984828501612f2d565b91505092915050565b60006020828403121561324457600080fd5b600082013567ffffffffffffffff81111561325e57600080fd5b61326a84828501612f6c565b91505092915050565b60006020828403121561328557600080fd5b600061329384828501612f96565b91505092915050565b600080604083850312156132af57600080fd5b60006132bd85828601612f96565b925050602083013567ffffffffffffffff8111156132da57600080fd5b6132e685828601612f6c565b9150509250929050565b6132f981614091565b82525050565b613308816140a3565b82525050565b613317816140af565b82525050565b61332e613329826140af565b61420a565b82525050565b600061333f82613f02565b6133498185613f18565b935061335981856020860161412b565b6133628161430b565b840191505092915050565b600061337882613f0d565b6133828185613f29565b935061339281856020860161412b565b61339b8161430b565b840191505092915050565b60006133b182613f0d565b6133bb8185613f3a565b93506133cb81856020860161412b565b80840191505092915050565b60006133e4600983613f3a565b91506133ef8261431c565b600982019050919050565b6000613407603283613f29565b915061341282614345565b604082019050919050565b600061342a602583613f29565b915061343582614394565b604082019050919050565b600061344d601c83613f29565b9150613458826143e3565b602082019050919050565b6000613470600883613f3a565b915061347b8261440c565b600882019050919050565b6000613493600a83613f3a565b915061349e82614435565b600a82019050919050565b60006134b6602483613f29565b91506134c18261445e565b604082019050919050565b60006134d9601983613f29565b91506134e4826144ad565b602082019050919050565b60006134fc601783613f29565b9150613507826144d6565b602082019050919050565b600061351f602c83613f29565b915061352a826144ff565b604082019050919050565b6000613542600183613f3a565b915061354d8261454e565b600182019050919050565b6000613565600383613f3a565b915061357082614577565b600382019050919050565b6000613588600783613f3a565b9150613593826145a0565b600782019050919050565b60006135ab603883613f29565b91506135b6826145c9565b604082019050919050565b60006135ce602a83613f29565b91506135d982614618565b604082019050919050565b60006135f1602983613f29565b91506135fc82614667565b604082019050919050565b6000613614602e83613f29565b915061361f826146b6565b604082019050919050565b6000613637600283613f3a565b915061364282614705565b600282019050919050565b600061365a602083613f29565b91506136658261472e565b602082019050919050565b600061367d603183613f29565b915061368882614757565b604082019050919050565b60006136a0602c83613f29565b91506136ab826147a6565b604082019050919050565b60006136c3602783613f29565b91506136ce826147f5565b604082019050919050565b60006136e6603083613f3a565b91506136f182614844565b603082019050919050565b6000613709602f83613f29565b915061371482614893565b604082019050919050565b600061372c601f83613f29565b9150613737826148e2565b602082019050919050565b600061374f604283613f3a565b915061375a8261490b565b604282019050919050565b6000613772602183613f29565b915061377d82614980565b604082019050919050565b6000613795601d83613f3a565b91506137a0826149cf565b601d82019050919050565b60006137b8601f83613f29565b91506137c3826149f8565b602082019050919050565b60006137db603183613f29565b91506137e682614a21565b604082019050919050565b60006137fe600283613f3a565b915061380982614a70565b600282019050919050565b6000613821600683613f3a565b915061382c82614a99565b600682019050919050565b6000613844600983613f3a565b915061384f82614ac2565b600982019050919050565b61386381614105565b82525050565b61387a61387582614105565b614214565b82525050565b600061388c828561331d565b60208201915061389c8284613869565b6020820191508190509392505050565b60006138b882846133a6565b915081905092915050565b60006138cf82856133a6565b91506138db82846133a6565b91508190509392505050565b60006138f382866133a6565b91506138ff82856133a6565b915061390a82613535565b915061391682846133a6565b915061392182613535565b9150819050949350505050565b600061393a82866133a6565b915061394582613463565b915061395182856133a6565b915061395c82613486565b915061396882846133a6565b915061397382613558565b9150819050949350505050565b600061398c82846133a6565b915061399782613814565b915081905092915050565b60006139ad826133d7565b91506139b88261357b565b91506139c382613742565b91506139cf82846133a6565b91506139da8261362a565b915081905092915050565b60006139f0826136d9565b91506139fc82856133a6565b9150613a0782613837565b9150613a1382846133a6565b9150613a1e826137f1565b91508190509392505050565b6000613a3582613788565b9150613a4182846133a6565b915081905092915050565b6000602082019050613a6160008301846132f0565b92915050565b6000608082019050613a7c60008301876132f0565b613a8960208301866132f0565b613a96604083018561385a565b8181036060830152613aa88184613334565b905095945050505050565b6000606082019050613ac860008301866132f0565b613ad5602083018561385a565b8181036040830152613ae78184613334565b9050949350505050565b6000602082019050613b0660008301846132ff565b92915050565b6000602082019050613b21600083018461330e565b92915050565b6000604082019050613b3c600083018561330e565b613b49602083018461385a565b9392505050565b6000608082019050613b65600083018761330e565b613b72602083018661385a565b613b7f60408301856132f0565b613b8c606083018461385a565b95945050505050565b60006020820190508181036000830152613baf818461336d565b905092915050565b60006020820190508181036000830152613bd0816133fa565b9050919050565b60006020820190508181036000830152613bf08161341d565b9050919050565b60006020820190508181036000830152613c1081613440565b9050919050565b60006020820190508181036000830152613c30816134a9565b9050919050565b60006020820190508181036000830152613c50816134cc565b9050919050565b60006020820190508181036000830152613c70816134ef565b9050919050565b60006020820190508181036000830152613c9081613512565b9050919050565b60006020820190508181036000830152613cb08161359e565b9050919050565b60006020820190508181036000830152613cd0816135c1565b9050919050565b60006020820190508181036000830152613cf0816135e4565b9050919050565b60006020820190508181036000830152613d1081613607565b9050919050565b60006020820190508181036000830152613d308161364d565b9050919050565b60006020820190508181036000830152613d5081613670565b9050919050565b60006020820190508181036000830152613d7081613693565b9050919050565b60006020820190508181036000830152613d90816136b6565b9050919050565b60006020820190508181036000830152613db0816136fc565b9050919050565b60006020820190508181036000830152613dd08161371f565b9050919050565b60006020820190508181036000830152613df081613765565b9050919050565b60006020820190508181036000830152613e10816137ab565b9050919050565b60006020820190508181036000830152613e30816137ce565b9050919050565b6000602082019050613e4c600083018461385a565b92915050565b6000604082019050613e67600083018561385a565b613e74602083018461385a565b9392505050565b6000613e85613e96565b9050613e918282614190565b919050565b6000604051905090565b600067ffffffffffffffff821115613ebb57613eba6142dc565b5b613ec48261430b565b9050602081019050919050565b600067ffffffffffffffff821115613eec57613eeb6142dc565b5b613ef58261430b565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613f5082614105565b9150613f5b83614105565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f9057613f8f61424f565b5b828201905092915050565b6000613fa68261410f565b9150613fb18361410f565b92508260ff03821115613fc757613fc661424f565b5b828201905092915050565b6000613fdd82614105565b9150613fe883614105565b925082613ff857613ff761427e565b5b828204905092915050565b600061400e82614105565b915061401983614105565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156140525761405161424f565b5b828202905092915050565b600061406882614105565b915061407383614105565b9250828210156140865761408561424f565b5b828203905092915050565b600061409c826140e5565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561414957808201518184015260208101905061412e565b83811115614158576000848401525b50505050565b6000600282049050600182168061417657607f821691505b6020821081141561418a576141896142ad565b5b50919050565b6141998261430b565b810181811067ffffffffffffffff821117156141b8576141b76142dc565b5b80604052505050565b60006141cc82614105565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156141ff576141fe61424f565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061422982614105565b915061423483614105565b9250826142445761424361427e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f272066696c6c3d27000000000000000000000000000000000000000000000000600082015250565b7f27207374726f6b653d2700000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f746f6b656e55524920697320616c726561647920736574000000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f272f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f535647204e465400000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f52616e646f6d206e756d626572206e6f7420796574207265636965766564206660008201527f726f6d2056524600000000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766727206865696768743d2700000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f222c20226465736372697074696f6e223a22416e204e4654206261736564206f60008201527f6e20535647222c202261747472696275746573223a22222c2022696d6167652260208201527f3a22000000000000000000000000000000000000000000000000000000000000604082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f746f6b656e496420686173206e6f7420796574206265656e206d696e74656400600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f273e000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f272077696474683d270000000000000000000000000000000000000000000000600082015250565b614af481614091565b8114614aff57600080fd5b50565b614b0b816140a3565b8114614b1657600080fd5b50565b614b22816140af565b8114614b2d57600080fd5b50565b614b39816140b9565b8114614b4457600080fd5b50565b614b5081614105565b8114614b5b57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220ed0bfcefbaa9644f601ee1d3674ad145568ae59bf065c3da38e8e5197b1b562e64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 291,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 293,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 297,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 301,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 305,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 311,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1278,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 79,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2102,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "keyHash",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 2104,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "fee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2106,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2108,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "maxPaths",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2110,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "maxPathCommands",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2112,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "size",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2115,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "pathCommands",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2118,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "colours",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2122,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "requestIdToSender",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2126,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "requestIdToTokenId",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2130,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "tokenIdToRandomNumber",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}