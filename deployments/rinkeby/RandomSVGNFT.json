{
  "address": "0x5B1ee72056CE1C6e3A0905eaeE06FEb59ac2fE6D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LinkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "CreatedRandomSVGNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "CreatedUnfinishedRandomSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colours",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "finishMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_imageURI",
          "type": "string"
        }
      ],
      "name": "formatTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePath",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathSVG",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generatePathCommand",
      "outputs": [
        {
          "internalType": "string",
          "name": "pathCommand",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "generateSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "finalSVG",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPathCommands",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPaths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pathCommands",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_svg",
          "type": "string"
        }
      ],
      "name": "svgToImageURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5540aa82a901e0c010f04dff0854c6ec1615950feb1759529c89c5f8d291e944",
  "receipt": {
    "to": null,
    "from": "0xd6372663118c4acD85daB483d956CA5e7Aab3EaA",
    "contractAddress": "0x5B1ee72056CE1C6e3A0905eaeE06FEb59ac2fE6D",
    "transactionIndex": 9,
    "gasUsed": "4602302",
    "logsBloom": "0x
    "blockHash": "0xf1463abd34d8ddff668f3abc26a0771f706463654c08977009f1bb25b631e546",
    "transactionHash": "0x5540aa82a901e0c010f04dff0854c6ec1615950feb1759529c89c5f8d291e944",
    "logs": [],
    "blockNumber": 10221156,
    "cumulativeGasUsed": "24418244",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01be23585060835e02b77ef475b0cc51aa1e0709",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",
    "100000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9e2e1520c444da444c4650aefe262fab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LinkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"CreatedRandomSVGNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"CreatedUnfinishedRandomSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colours\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"finishMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_imageURI\",\"type\":\"string\"}],\"name\":\"formatTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePath\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathSVG\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generatePathCommand\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"pathCommand\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"generateSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"finalSVG\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPathCommands\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPaths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pathCommands\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_svg\",\"type\":\"string\"}],\"name\":\"svgToImageURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomSVGNFT.sol\":\"RandomSVGNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/RandomSVGNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\n\\r\\ncontract RandomSVGNFT is ERC721URIStorage, VRFConsumerBase {\\r\\n    bytes32 public keyHash;\\r\\n    uint256 public fee;\\r\\n    uint256 public tokenCounter;\\r\\n\\r\\n    // SVG parameters\\r\\n    uint256 public maxPaths;\\r\\n    uint256 public maxPathCommands;\\r\\n    uint256 public size;\\r\\n\\r\\n    string[] public pathCommands;\\r\\n    string[] public colours;\\r\\n\\r\\n    mapping(bytes32 => address) public requestIdToSender;\\r\\n    mapping(bytes32 => uint256) public requestIdToTokenId;\\r\\n    mapping(uint256 => uint256) public tokenIdToRandomNumber;\\r\\n\\r\\n    event RequestedRandomSVG(bytes32 indexed requestId, uint256 tokenId);\\r\\n    event CreatedUnfinishedRandomSVG(\\r\\n        uint256 indexed tokenId,\\r\\n        uint256 randomNumber\\r\\n    );\\r\\n    event CreatedRandomSVGNFT(uint256 indexed tokenId, string tokenURI);\\r\\n\\r\\n    constructor(\\r\\n        address _VRFCoordinator,\\r\\n        address _LinkToken,\\r\\n        bytes32 _keyhash,\\r\\n        uint256 _fee\\r\\n    )\\r\\n        VRFConsumerBase(_VRFCoordinator, _LinkToken)\\r\\n        ERC721(\\\"RandomSVGNFT\\\", \\\"rsNFT\\\")\\r\\n    {\\r\\n        keyHash = _keyhash;\\r\\n        fee = _fee;\\r\\n        tokenCounter = 0;\\r\\n        maxPaths = 10;\\r\\n        maxPathCommands = 5;\\r\\n        size = 500;\\r\\n        pathCommands = [\\\"M\\\", \\\"L\\\"];\\r\\n        colours = [\\r\\n            \\\"black\\\",\\r\\n            \\\"white\\\",\\r\\n            \\\"blue\\\",\\r\\n            \\\"red\\\",\\r\\n            \\\"green\\\",\\r\\n            \\\"yellow\\\",\\r\\n            \\\"purple\\\",\\r\\n            \\\"orange\\\"\\r\\n        ];\\r\\n    }\\r\\n\\r\\n    function create() public returns (bytes32 requestId) {\\r\\n        requestId = requestRandomness(keyHash, fee);\\r\\n        requestIdToSender[requestId] = msg.sender;\\r\\n        uint256 tokenId = tokenCounter;\\r\\n        requestIdToTokenId[requestId] = tokenId;\\r\\n        tokenCounter = tokenCounter + 1;\\r\\n        emit RequestedRandomSVG(requestId, tokenId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomness(bytes32 _requestId, uint256 _randomNumber)\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        address nftOwner = requestIdToSender[_requestId];\\r\\n        uint256 tokenId = requestIdToTokenId[_requestId];\\r\\n        _safeMint(nftOwner, tokenId);\\r\\n        tokenIdToRandomNumber[tokenId] = _randomNumber;\\r\\n        emit CreatedUnfinishedRandomSVG(tokenId, _randomNumber);\\r\\n    }\\r\\n\\r\\n    function finishMint(uint256 _tokenId) public {\\r\\n        require(\\r\\n            bytes(tokenURI(_tokenId)).length == 0,\\r\\n            \\\"tokenURI is already set\\\"\\r\\n        );\\r\\n        require(tokenCounter > _tokenId, \\\"tokenId has not yet been minted\\\");\\r\\n        require(\\r\\n            tokenIdToRandomNumber[_tokenId] > 0,\\r\\n            \\\"Random number not yet recieved from VRF\\\"\\r\\n        );\\r\\n        uint256 randomNumber = tokenIdToRandomNumber[_tokenId];\\r\\n        string memory svg = generateSVG(randomNumber);\\r\\n        string memory imageURI = svgToImageURI(svg);\\r\\n        string memory tokenURI = formatTokenURI(imageURI);\\r\\n        _setTokenURI(_tokenId, tokenURI);\\r\\n        emit CreatedRandomSVGNFT(_tokenId, tokenURI);\\r\\n    }\\r\\n\\r\\n    function generateSVG(uint256 _randomNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory finalSVG)\\r\\n    {\\r\\n        uint256 numberOfPaths = (_randomNumber % maxPaths) + 2;\\r\\n        finalSVG = string(\\r\\n            abi.encodePacked(\\r\\n                \\\"<svg xmlns='http://www.w3.org/2000/svg' height='\\\",\\r\\n                uint2str(size),\\r\\n                \\\"' width='\\\",\\r\\n                uint2str(size),\\r\\n                \\\"'>\\\"\\r\\n            )\\r\\n        );\\r\\n        for (uint256 i = 0; i < numberOfPaths; i++) {\\r\\n            uint256 newRNG = uint256(keccak256(abi.encode(_randomNumber, i)));\\r\\n            string memory pathSVG = generatePath(newRNG);\\r\\n            finalSVG = string(abi.encodePacked(finalSVG, pathSVG));\\r\\n        }\\r\\n        finalSVG = string(abi.encodePacked(finalSVG, \\\"</svg>\\\"));\\r\\n    }\\r\\n\\r\\n    function uint2str(uint256 _i)\\r\\n        internal\\r\\n        pure\\r\\n        returns (string memory _uintAsString)\\r\\n    {\\r\\n        if (_i == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = _i;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (_i != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            _i /= 10;\\r\\n        }\\r\\n        return string(bstr);\\r\\n    }\\r\\n\\r\\n    function generatePath(uint256 _randomNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory pathSVG)\\r\\n    {\\r\\n        uint256 numberOfPathCommands = (_randomNumber % maxPathCommands) + 1;\\r\\n        pathSVG = \\\"<path d='\\\";\\r\\n        for (uint256 i = 0; i < numberOfPathCommands; i++) {\\r\\n            uint256 newRNG = uint256(\\r\\n                keccak256(abi.encode(_randomNumber, size + i))\\r\\n            );\\r\\n            string memory pathCommand = generatePathCommand(newRNG);\\r\\n            pathSVG = string(abi.encodePacked(pathSVG, pathCommand));\\r\\n        }\\r\\n        string memory colour = colours[_randomNumber % colours.length];\\r\\n        pathSVG = string(\\r\\n            abi.encodePacked(\\r\\n                pathSVG,\\r\\n                \\\"' fill='\\\",\\r\\n                colour,\\r\\n                \\\"' stroke='\\\",\\r\\n                colour,\\r\\n                \\\"'/>\\\"\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function generatePathCommand(uint256 _randomNumber)\\r\\n        public\\r\\n        view\\r\\n        returns (string memory pathCommand)\\r\\n    {\\r\\n        pathCommand = pathCommands[_randomNumber % pathCommands.length];\\r\\n        uint256 parameterOne = uint256(\\r\\n            keccak256(abi.encode(_randomNumber, size * 2))\\r\\n        ) % size;\\r\\n        uint256 parameterTwo = uint256(\\r\\n            keccak256(abi.encode(_randomNumber, size * 3))\\r\\n        ) % size;\\r\\n        pathCommand = string(\\r\\n            abi.encodePacked(\\r\\n                pathCommand,\\r\\n                \\\" \\\",\\r\\n                uint2str(parameterOne),\\r\\n                \\\" \\\",\\r\\n                uint2str(parameterTwo)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function svgToImageURI(string memory _svg)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\r\\n        string memory svgBase64Encoded = Base64.encode(\\r\\n            bytes(string(abi.encodePacked(_svg)))\\r\\n        );\\r\\n        string memory imageURI = string(\\r\\n            abi.encodePacked(baseURL, svgBase64Encoded)\\r\\n        );\\r\\n        return imageURI;\\r\\n    }\\r\\n\\r\\n    function formatTokenURI(string memory _imageURI)\\r\\n        public\\r\\n        pure\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    \\\"data:application/json;base64,\\\",\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\":\\\"',\\r\\n                                \\\"SVG NFT\\\",\\r\\n                                '\\\", \\\"description\\\":\\\"An NFT based on SVG\\\", \\\"attributes\\\":\\\"\\\", \\\"image\\\":\\\"',\\r\\n                                _imageURI,\\r\\n                                '\\\"}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6985f596dc46d8cf84c74eda1d78d05e532bdeb8136d8e66c41b828819a137b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620052403803806200524083398181016040528101906200003791906200063a565b83836040518060400160405280600c81526020017f52616e646f6d5356474e465400000000000000000000000000000000000000008152506040518060400160405280600581526020017f72734e46540000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bd92919062000409565b508060019080519060200190620000d692919062000409565b5050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505081600881905550806009819055506000600a81905550600a600b819055506005600c819055506101f4600d8190555060405180604001604052806040518060400160405280600181526020017f4d0000000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600181526020017f4c00000000000000000000000000000000000000000000000000000000000000815250815250600e906002620002099291906200049a565b506040518061010001604052806040518060400160405280600581526020017f626c61636b00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f776869746500000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600481526020017f626c75650000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600381526020017f726564000000000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600581526020017f677265656e00000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f79656c6c6f77000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f707572706c65000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f6f72616e67650000000000000000000000000000000000000000000000000000815250815250600f906008620003fe92919062000501565b5050505050620007a1565b8280546200041790620006ee565b90600052602060002090601f0160209004810192826200043b576000855562000487565b82601f106200045657805160ff191683800117855562000487565b8280016001018555821562000487579182015b828111156200048657825182559160200191906001019062000469565b5b50905062000496919062000568565b5090565b828054828255906000526020600020908101928215620004ee579160200282015b82811115620004ed578251829080519060200190620004dc92919062000409565b5091602001919060010190620004bb565b5b509050620004fd919062000587565b5090565b82805482825590600052602060002090810192821562000555579160200282015b82811115620005545782518290805190602001906200054392919062000409565b509160200191906001019062000522565b5b50905062000564919062000587565b5090565b5b808211156200058357600081600090555060010162000569565b5090565b5b80821115620005ab5760008181620005a19190620005af565b5060010162000588565b5090565b508054620005bd90620006ee565b6000825580601f10620005d15750620005f2565b601f016020900490600052602060002090810190620005f1919062000568565b5b50565b600081519050620006068162000753565b92915050565b6000815190506200061d816200076d565b92915050565b600081519050620006348162000787565b92915050565b600080600080608085870312156200065157600080fd5b60006200066187828801620005f5565b94505060206200067487828801620005f5565b935050604062000687878288016200060c565b92505060606200069a8782880162000623565b91505092959194509250565b6000620006b382620006c4565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060028204905060018216806200070757607f821691505b602082108114156200071e576200071d62000724565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6200075e81620006a6565b81146200076a57600080fd5b50565b6200077881620006ba565b81146200078457600080fd5b50565b6200079281620006e4565b81146200079e57600080fd5b50565b60805160601c60a05160601c614a6c620007d460003960008181611168015261253c015260006125000152614a6c6000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806371aee1931161010f578063c68b49d1116100a2578063ddca3f4311610071578063ddca3f431461063d578063df9bcd241461065b578063e985e9c514610679578063efc81a8c146106a9576101f0565b8063c68b49d11461058f578063c76ab940146105bf578063c87b56dd146105ef578063d082e3811461061f576101f0565b806395d89b41116100de57806395d89b41146105095780639c1cd79514610527578063a22cb46514610557578063b88d4fde14610573576101f0565b806371aee1931461046f57806394985ddd1461049f578063949d225d146104bb578063955968d4146104d9576101f0565b806330d871c611610187578063624194c711610156578063624194c7146103c35780636352211e146103df5780636dcee4ca1461040f57806370a082311461043f576101f0565b806330d871c61461032957806333af59891461035957806342842e0e1461038957806361728f39146103a5576101f0565b8063095ea7b3116101c3578063095ea7b314610291578063219c0eee146102ad57806322881f88146102dd57806323b872dd1461030d576101f0565b806301f920c6146101f557806301ffc9a71461021357806306fdde0314610243578063081812fc14610261575b600080fd5b6101fd6106c7565b60405161020a9190613ccf565b60405180910390f35b61022d600480360381019061022891906130cc565b6106cd565b60405161023a9190613989565b60405180910390f35b61024b6107af565b6040516102589190613a2d565b60405180910390f35b61027b6004803603810190610276919061315f565b610841565b60405161028891906138e4565b60405180910390f35b6102ab60048036038101906102a69190613002565b6108c6565b005b6102c760048036038101906102c29190613067565b6109de565b6040516102d491906138e4565b60405180910390f35b6102f760048036038101906102f29190613067565b610a11565b6040516103049190613ccf565b60405180910390f35b61032760048036038101906103229190612efc565b610a29565b005b610343600480360381019061033e919061311e565b610a89565b6040516103509190613a2d565b60405180910390f35b610373600480360381019061036e919061315f565b610b22565b6040516103809190613a2d565b60405180910390f35b6103a3600480360381019061039e9190612efc565b610d16565b005b6103ad610d36565b6040516103ba91906139a4565b60405180910390f35b6103dd60048036038101906103d8919061315f565b610d3c565b005b6103f960048036038101906103f4919061315f565b610eaa565b60405161040691906138e4565b60405180910390f35b6104296004803603810190610424919061315f565b610f5c565b6040516104369190613a2d565b60405180910390f35b61045960048036038101906104549190612e97565b61105e565b6040516104669190613ccf565b60405180910390f35b6104896004803603810190610484919061311e565b611116565b6040516104969190613a2d565b60405180910390f35b6104b960048036038101906104b49190613090565b611166565b005b6104c3611202565b6040516104d09190613ccf565b60405180910390f35b6104f360048036038101906104ee919061315f565b611208565b6040516105009190613a2d565b60405180910390f35b6105116112b4565b60405161051e9190613a2d565b60405180910390f35b610541600480360381019061053c919061315f565b611346565b60405161054e9190613ccf565b60405180910390f35b610571600480360381019061056c9190612fc6565b61135e565b005b61058d60048036038101906105889190612f4b565b611374565b005b6105a960048036038101906105a4919061315f565b6113d6565b6040516105b69190613a2d565b60405180910390f35b6105d960048036038101906105d4919061315f565b611589565b6040516105e69190613a2d565b60405180910390f35b6106096004803603810190610604919061315f565b611635565b6040516106169190613a2d565b60405180910390f35b610627611787565b6040516106349190613ccf565b60405180910390f35b61064561178d565b6040516106529190613ccf565b60405180910390f35b610663611793565b6040516106709190613ccf565b60405180910390f35b610693600480360381019061068e9190612ec0565b611799565b6040516106a09190613989565b60405180910390f35b6106b161182d565b6040516106be91906139a4565b60405180910390f35b600b5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061079857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107a857506107a782611901565b5b9050919050565b6060600080546107be90613ff6565b80601f01602080910402602001604051908101604052809291908181526020018280546107ea90613ff6565b80156108375780601f1061080c57610100808354040283529160200191610837565b820191906000526020600020905b81548152906001019060200180831161081a57829003601f168201915b5050505050905090565b600061084c8261196b565b61088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290613bef565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108d182610eaa565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093990613c6f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109616119d7565b73ffffffffffffffffffffffffffffffffffffffff161480610990575061098f8161098a6119d7565b611799565b5b6109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c690613b2f565b60405180910390fd5b6109d983836119df565b505050565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60116020528060005260406000206000915090505481565b610a3a610a346119d7565b82611a98565b610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7090613caf565b60405180910390fd5b610a84838383611b76565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610aef84604051602001610adb9190613744565b604051602081830303815290604052611ddd565b905060008282604051602001610b0692919061375b565b6040516020818303038152906040529050809350505050919050565b606060006001600c5484610b3691906140b6565b610b409190613ddd565b90506040518060400160405280600981526020017f3c7061746820643d270000000000000000000000000000000000000000000000815250915060005b81811015610c085760008482600d54610b969190613ddd565b604051602001610ba7929190613cea565b6040516020818303038152906040528051906020012060001c90506000610bcd826113d6565b90508481604051602001610be292919061375b565b604051602081830303815290604052945050508080610c0090614059565b915050610b7d565b506000600f808054905085610c1d91906140b6565b81548110610c54577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018054610c6990613ff6565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9590613ff6565b8015610ce25780601f10610cb757610100808354040283529160200191610ce2565b820191906000526020600020905b815481529060010190602001808311610cc557829003601f168201915b50505050509050828182604051602001610cfe9392919061377f565b60405160208183030381529060405292505050919050565b610d3183838360405180602001604052806000815250611374565b505050565b60085481565b6000610d4782611635565b5114610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90613aef565b60405180910390fd5b80600a5411610dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc390613c8f565b60405180910390fd5b6000601260008381526020019081526020016000205411610e22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1990613c0f565b60405180910390fd5b6000601260008381526020019081526020016000205490506000610e4582610f5c565b90506000610e5282610a89565b90506000610e5f82611116565b9050610e6b8582611f7c565b847fcb25abd690c2dce293e6237b33535facf92481a7036a95e95ff3977eeaa6668882604051610e9b9190613a2d565b60405180910390a25050505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90613b6f565b60405180910390fd5b80915050919050565b606060006002600b5484610f7091906140b6565b610f7a9190613ddd565b9050610f87600d54611ff0565b610f92600d54611ff0565b604051602001610fa392919061387d565b604051602081830303815290604052915060005b818110156110355760008482604051602001610fd4929190613cea565b6040516020818303038152906040528051906020012060001c90506000610ffa82610b22565b9050848160405160200161100f92919061375b565b60405160208183030381529060405294505050808061102d90614059565b915050610fb7565b50816040516020016110479190613818565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c690613b4f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606111408260405160200161112c919061383a565b604051602081830303815290604052611ddd565b60405160200161115091906138c2565b6040516020818303038152906040529050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111eb90613c4f565b60405180910390fd5b6111fe82826121c5565b5050565b600d5481565b600e818154811061121857600080fd5b90600052602060002001600091509050805461123390613ff6565b80601f016020809104026020016040519081016040528092919081815260200182805461125f90613ff6565b80156112ac5780601f10611281576101008083540402835291602001916112ac565b820191906000526020600020905b81548152906001019060200180831161128f57829003601f168201915b505050505081565b6060600180546112c390613ff6565b80601f01602080910402602001604051908101604052809291908181526020018280546112ef90613ff6565b801561133c5780601f106113115761010080835404028352916020019161133c565b820191906000526020600020905b81548152906001019060200180831161131f57829003601f168201915b5050505050905090565b60126020528060005260406000206000915090505481565b6113706113696119d7565b8383612275565b5050565b61138561137f6119d7565b83611a98565b6113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90613caf565b60405180910390fd5b6113d0848484846123e2565b50505050565b6060600e8080549050836113ea91906140b6565b81548110611421577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805461143690613ff6565b80601f016020809104026020016040519081016040528092919081815260200182805461146290613ff6565b80156114af5780601f10611484576101008083540402835291602001916114af565b820191906000526020600020905b81548152906001019060200180831161149257829003601f168201915b505050505090506000600d54836002600d546114cb9190613e9b565b6040516020016114dc929190613cea565b6040516020818303038152906040528051906020012060001c6114ff91906140b6565b90506000600d54846003600d546115169190613e9b565b604051602001611527929190613cea565b6040516020818303038152906040528051906020012060001c61154a91906140b6565b90508261155683611ff0565b61155f83611ff0565b604051602001611571939291906137d1565b60405160208183030381529060405292505050919050565b600f818154811061159957600080fd5b9060005260206000200160009150905080546115b490613ff6565b80601f01602080910402602001604051908101604052809291908181526020018280546115e090613ff6565b801561162d5780601f106116025761010080835404028352916020019161162d565b820191906000526020600020905b81548152906001019060200180831161161057829003601f168201915b505050505081565b60606116408261196b565b61167f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167690613bcf565b60405180910390fd5b600060066000848152602001908152602001600020805461169f90613ff6565b80601f01602080910402602001604051908101604052809291908181526020018280546116cb90613ff6565b80156117185780601f106116ed57610100808354040283529160200191611718565b820191906000526020600020905b8154815290600101906020018083116116fb57829003601f168201915b50505050509050600061172961243e565b905060008151141561173f578192505050611782565b60008251111561177457808260405160200161175c92919061375b565b60405160208183030381529060405292505050611782565b61177d84612455565b925050505b919050565b600a5481565b60095481565b600c5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061183d6008546009546124fc565b9050336010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a5490508060116000848152602001908152602001600020819055506001600a546118bf9190613ddd565b600a81905550817fd18cd6f82baac9078af064ea020dd3dc7bff649bd8d50684f972d5995fec6e69826040516118f59190613ccf565b60405180910390a25090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611a5283610eaa565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611aa38261196b565b611ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad990613b0f565b60405180910390fd5b6000611aed83610eaa565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611b5c57508373ffffffffffffffffffffffffffffffffffffffff16611b4484610841565b73ffffffffffffffffffffffffffffffffffffffff16145b80611b6d5750611b6c8185611799565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611b9682610eaa565b73ffffffffffffffffffffffffffffffffffffffff1614611bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be390613a6f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5390613aaf565b60405180910390fd5b611c6783838361265e565b611c726000826119df565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cc29190613ef5565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d199190613ddd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611dd8838383612663565b505050565b6060600082511415611e0057604051806020016040528060008152509050611f77565b60006040518060600160405280604081526020016149f76040913990506000600360028551611e2f9190613ddd565b611e399190613e6a565b6004611e459190613e9b565b90506000602082611e569190613ddd565b67ffffffffffffffff811115611e95577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ec75781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611f36576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611edb565b600389510660018114611f505760028114611f6057611f6b565b613d3d60f01b6002830352611f6b565b603d60f81b60018303525b50505050508093505050505b919050565b611f858261196b565b611fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbb90613b8f565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611feb929190612c91565b505050565b60606000821415612038576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506121c0565b600082905060005b6000821461206a57808061205390614059565b915050600a826120639190613e6a565b9150612040565b60008167ffffffffffffffff8111156120ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120de5781602001600182028036833780820191505090505b50905060008290505b600086146121b8576001816120fc9190613ef5565b90506000600a808861210e9190613e6a565b6121189190613e9b565b876121239190613ef5565b603061212f9190613e33565b905060008160f81b905080848481518110612173577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886121af9190613e6a565b975050506120e7565b819450505050505b919050565b60006010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006011600085815260200190815260200160002054905061221f8282612668565b826012600083815260200190815260200160002081905550807faad5362ce528ed941024b95d4c18dfd49b8503e1f586a5c353631d98c2af41b7846040516122679190613ccf565b60405180910390a250505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122db90613acf565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123d59190613989565b60405180910390a3505050565b6123ed848484611b76565b6123f984848484612686565b612438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242f90613a4f565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606124608261196b565b61249f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249690613c2f565b60405180910390fd5b60006124a961243e565b905060008151116124c957604051806020016040528060008152506124f4565b806124d38461281d565b6040516020016124e492919061375b565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016125709291906139bf565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161259d9392919061394b565b602060405180830381600087803b1580156125b757600080fd5b505af11580156125cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ef919061303e565b5060006126128460003060076000898152602001908152602001600020546129ca565b9050600160076000868152602001908152602001600020546126349190613ddd565b60076000868152602001908152602001600020819055506126558482612a06565b91505092915050565b505050565b505050565b612682828260405180602001604052806000815250612a39565b5050565b60006126a78473ffffffffffffffffffffffffffffffffffffffff16612a94565b15612810578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026126d06119d7565b8786866040518563ffffffff1660e01b81526004016126f294939291906138ff565b602060405180830381600087803b15801561270c57600080fd5b505af192505050801561273d57506040513d601f19601f8201168201806040525081019061273a91906130f5565b60015b6127c0573d806000811461276d576040519150601f19603f3d011682016040523d82523d6000602084013e612772565b606091505b506000815114156127b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127af90613a4f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612815565b600190505b949350505050565b60606000821415612865576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506129c5565b600082905060005b6000821461289757808061288090614059565b915050600a826128909190613e6a565b915061286d565b60008167ffffffffffffffff8111156128d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561290b5781602001600182028036833780820191505090505b5090505b600085146129be576001826129249190613ef5565b9150600a8561293391906140b6565b603061293f9190613ddd565b60f81b81838151811061297b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856129b79190613e6a565b945061290f565b8093505050505b919050565b6000848484846040516020016129e394939291906139e8565b6040516020818303038152906040528051906020012060001c9050949350505050565b60008282604051602001612a1b929190613718565b60405160208183030381529060405280519060200120905092915050565b612a438383612ab7565b612a506000848484612686565b612a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8690613a4f565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1e90613baf565b60405180910390fd5b612b308161196b565b15612b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6790613a8f565b60405180910390fd5b612b7c6000838361265e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bcc9190613ddd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612c8d60008383612663565b5050565b828054612c9d90613ff6565b90600052602060002090601f016020900481019282612cbf5760008555612d06565b82601f10612cd857805160ff1916838001178555612d06565b82800160010185558215612d06579182015b82811115612d05578251825591602001919060010190612cea565b5b509050612d139190612d17565b5090565b5b80821115612d30576000816000905550600101612d18565b5090565b6000612d47612d4284613d38565b613d13565b905082815260208101848484011115612d5f57600080fd5b612d6a848285613fb4565b509392505050565b6000612d85612d8084613d69565b613d13565b905082815260208101848484011115612d9d57600080fd5b612da8848285613fb4565b509392505050565b600081359050612dbf81614983565b92915050565b600081359050612dd48161499a565b92915050565b600081519050612de98161499a565b92915050565b600081359050612dfe816149b1565b92915050565b600081359050612e13816149c8565b92915050565b600081519050612e28816149c8565b92915050565b600082601f830112612e3f57600080fd5b8135612e4f848260208601612d34565b91505092915050565b600082601f830112612e6957600080fd5b8135612e79848260208601612d72565b91505092915050565b600081359050612e91816149df565b92915050565b600060208284031215612ea957600080fd5b6000612eb784828501612db0565b91505092915050565b60008060408385031215612ed357600080fd5b6000612ee185828601612db0565b9250506020612ef285828601612db0565b9150509250929050565b600080600060608486031215612f1157600080fd5b6000612f1f86828701612db0565b9350506020612f3086828701612db0565b9250506040612f4186828701612e82565b9150509250925092565b60008060008060808587031215612f6157600080fd5b6000612f6f87828801612db0565b9450506020612f8087828801612db0565b9350506040612f9187828801612e82565b925050606085013567ffffffffffffffff811115612fae57600080fd5b612fba87828801612e2e565b91505092959194509250565b60008060408385031215612fd957600080fd5b6000612fe785828601612db0565b9250506020612ff885828601612dc5565b9150509250929050565b6000806040838503121561301557600080fd5b600061302385828601612db0565b925050602061303485828601612e82565b9150509250929050565b60006020828403121561305057600080fd5b600061305e84828501612dda565b91505092915050565b60006020828403121561307957600080fd5b600061308784828501612def565b91505092915050565b600080604083850312156130a357600080fd5b60006130b185828601612def565b92505060206130c285828601612e82565b9150509250929050565b6000602082840312156130de57600080fd5b60006130ec84828501612e04565b91505092915050565b60006020828403121561310757600080fd5b600061311584828501612e19565b91505092915050565b60006020828403121561313057600080fd5b600082013567ffffffffffffffff81111561314a57600080fd5b61315684828501612e58565b91505092915050565b60006020828403121561317157600080fd5b600061317f84828501612e82565b91505092915050565b61319181613f29565b82525050565b6131a081613f3b565b82525050565b6131af81613f47565b82525050565b6131c66131c182613f47565b6140a2565b82525050565b60006131d782613d9a565b6131e18185613db0565b93506131f1818560208601613fc3565b6131fa816141a3565b840191505092915050565b600061321082613da5565b61321a8185613dc1565b935061322a818560208601613fc3565b613233816141a3565b840191505092915050565b600061324982613da5565b6132538185613dd2565b9350613263818560208601613fc3565b80840191505092915050565b600061327c600983613dd2565b9150613287826141b4565b600982019050919050565b600061329f603283613dc1565b91506132aa826141dd565b604082019050919050565b60006132c2602583613dc1565b91506132cd8261422c565b604082019050919050565b60006132e5601c83613dc1565b91506132f08261427b565b602082019050919050565b6000613308600883613dd2565b9150613313826142a4565b600882019050919050565b600061332b600a83613dd2565b9150613336826142cd565b600a82019050919050565b600061334e602483613dc1565b9150613359826142f6565b604082019050919050565b6000613371601983613dc1565b915061337c82614345565b602082019050919050565b6000613394601783613dc1565b915061339f8261436e565b602082019050919050565b60006133b7602c83613dc1565b91506133c282614397565b604082019050919050565b60006133da600183613dd2565b91506133e5826143e6565b600182019050919050565b60006133fd600383613dd2565b91506134088261440f565b600382019050919050565b6000613420600783613dd2565b915061342b82614438565b600782019050919050565b6000613443603883613dc1565b915061344e82614461565b604082019050919050565b6000613466602a83613dc1565b9150613471826144b0565b604082019050919050565b6000613489602983613dc1565b9150613494826144ff565b604082019050919050565b60006134ac602e83613dc1565b91506134b78261454e565b604082019050919050565b60006134cf600283613dd2565b91506134da8261459d565b600282019050919050565b60006134f2602083613dc1565b91506134fd826145c6565b602082019050919050565b6000613515603183613dc1565b9150613520826145ef565b604082019050919050565b6000613538602c83613dc1565b91506135438261463e565b604082019050919050565b600061355b602783613dc1565b91506135668261468d565b604082019050919050565b600061357e603083613dd2565b9150613589826146dc565b603082019050919050565b60006135a1602f83613dc1565b91506135ac8261472b565b604082019050919050565b60006135c4601f83613dc1565b91506135cf8261477a565b602082019050919050565b60006135e7604283613dd2565b91506135f2826147a3565b604282019050919050565b600061360a602183613dc1565b915061361582614818565b604082019050919050565b600061362d601d83613dd2565b915061363882614867565b601d82019050919050565b6000613650601f83613dc1565b915061365b82614890565b602082019050919050565b6000613673603183613dc1565b915061367e826148b9565b604082019050919050565b6000613696600283613dd2565b91506136a182614908565b600282019050919050565b60006136b9600683613dd2565b91506136c482614931565b600682019050919050565b60006136dc600983613dd2565b91506136e78261495a565b600982019050919050565b6136fb81613f9d565b82525050565b61371261370d82613f9d565b6140ac565b82525050565b600061372482856131b5565b6020820191506137348284613701565b6020820191508190509392505050565b6000613750828461323e565b915081905092915050565b6000613767828561323e565b9150613773828461323e565b91508190509392505050565b600061378b828661323e565b9150613796826132fb565b91506137a2828561323e565b91506137ad8261331e565b91506137b9828461323e565b91506137c4826133f0565b9150819050949350505050565b60006137dd828661323e565b91506137e8826133cd565b91506137f4828561323e565b91506137ff826133cd565b915061380b828461323e565b9150819050949350505050565b6000613824828461323e565b915061382f826136ac565b915081905092915050565b60006138458261326f565b915061385082613413565b915061385b826135da565b9150613867828461323e565b9150613872826134c2565b915081905092915050565b600061388882613571565b9150613894828561323e565b915061389f826136cf565b91506138ab828461323e565b91506138b682613689565b91508190509392505050565b60006138cd82613620565b91506138d9828461323e565b915081905092915050565b60006020820190506138f96000830184613188565b92915050565b60006080820190506139146000830187613188565b6139216020830186613188565b61392e60408301856136f2565b818103606083015261394081846131cc565b905095945050505050565b60006060820190506139606000830186613188565b61396d60208301856136f2565b818103604083015261397f81846131cc565b9050949350505050565b600060208201905061399e6000830184613197565b92915050565b60006020820190506139b960008301846131a6565b92915050565b60006040820190506139d460008301856131a6565b6139e160208301846136f2565b9392505050565b60006080820190506139fd60008301876131a6565b613a0a60208301866136f2565b613a176040830185613188565b613a2460608301846136f2565b95945050505050565b60006020820190508181036000830152613a478184613205565b905092915050565b60006020820190508181036000830152613a6881613292565b9050919050565b60006020820190508181036000830152613a88816132b5565b9050919050565b60006020820190508181036000830152613aa8816132d8565b9050919050565b60006020820190508181036000830152613ac881613341565b9050919050565b60006020820190508181036000830152613ae881613364565b9050919050565b60006020820190508181036000830152613b0881613387565b9050919050565b60006020820190508181036000830152613b28816133aa565b9050919050565b60006020820190508181036000830152613b4881613436565b9050919050565b60006020820190508181036000830152613b6881613459565b9050919050565b60006020820190508181036000830152613b888161347c565b9050919050565b60006020820190508181036000830152613ba88161349f565b9050919050565b60006020820190508181036000830152613bc8816134e5565b9050919050565b60006020820190508181036000830152613be881613508565b9050919050565b60006020820190508181036000830152613c088161352b565b9050919050565b60006020820190508181036000830152613c288161354e565b9050919050565b60006020820190508181036000830152613c4881613594565b9050919050565b60006020820190508181036000830152613c68816135b7565b9050919050565b60006020820190508181036000830152613c88816135fd565b9050919050565b60006020820190508181036000830152613ca881613643565b9050919050565b60006020820190508181036000830152613cc881613666565b9050919050565b6000602082019050613ce460008301846136f2565b92915050565b6000604082019050613cff60008301856136f2565b613d0c60208301846136f2565b9392505050565b6000613d1d613d2e565b9050613d298282614028565b919050565b6000604051905090565b600067ffffffffffffffff821115613d5357613d52614174565b5b613d5c826141a3565b9050602081019050919050565b600067ffffffffffffffff821115613d8457613d83614174565b5b613d8d826141a3565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613de882613f9d565b9150613df383613f9d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613e2857613e276140e7565b5b828201905092915050565b6000613e3e82613fa7565b9150613e4983613fa7565b92508260ff03821115613e5f57613e5e6140e7565b5b828201905092915050565b6000613e7582613f9d565b9150613e8083613f9d565b925082613e9057613e8f614116565b5b828204905092915050565b6000613ea682613f9d565b9150613eb183613f9d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613eea57613ee96140e7565b5b828202905092915050565b6000613f0082613f9d565b9150613f0b83613f9d565b925082821015613f1e57613f1d6140e7565b5b828203905092915050565b6000613f3482613f7d565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613fe1578082015181840152602081019050613fc6565b83811115613ff0576000848401525b50505050565b6000600282049050600182168061400e57607f821691505b6020821081141561402257614021614145565b5b50919050565b614031826141a3565b810181811067ffffffffffffffff821117156140505761404f614174565b5b80604052505050565b600061406482613f9d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614097576140966140e7565b5b600182019050919050565b6000819050919050565b6000819050919050565b60006140c182613f9d565b91506140cc83613f9d565b9250826140dc576140db614116565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f272066696c6c3d27000000000000000000000000000000000000000000000000600082015250565b7f27207374726f6b653d2700000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f746f6b656e55524920697320616c726561647920736574000000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f272f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f535647204e465400000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f52616e646f6d206e756d626572206e6f7420796574207265636965766564206660008201527f726f6d2056524600000000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766727206865696768743d2700000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f222c20226465736372697074696f6e223a22416e204e4654206261736564206f60008201527f6e20535647222c202261747472696275746573223a22222c2022696d6167652260208201527f3a22000000000000000000000000000000000000000000000000000000000000604082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f746f6b656e496420686173206e6f7420796574206265656e206d696e74656400600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f273e000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f272077696474683d270000000000000000000000000000000000000000000000600082015250565b61498c81613f29565b811461499757600080fd5b50565b6149a381613f3b565b81146149ae57600080fd5b50565b6149ba81613f47565b81146149c557600080fd5b50565b6149d181613f51565b81146149dc57600080fd5b50565b6149e881613f9d565b81146149f357600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212207b9932a6f8390cc87a48519b038a324c8f3cc1563caae300025447714299ce8664736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806371aee1931161010f578063c68b49d1116100a2578063ddca3f4311610071578063ddca3f431461063d578063df9bcd241461065b578063e985e9c514610679578063efc81a8c146106a9576101f0565b8063c68b49d11461058f578063c76ab940146105bf578063c87b56dd146105ef578063d082e3811461061f576101f0565b806395d89b41116100de57806395d89b41146105095780639c1cd79514610527578063a22cb46514610557578063b88d4fde14610573576101f0565b806371aee1931461046f57806394985ddd1461049f578063949d225d146104bb578063955968d4146104d9576101f0565b806330d871c611610187578063624194c711610156578063624194c7146103c35780636352211e146103df5780636dcee4ca1461040f57806370a082311461043f576101f0565b806330d871c61461032957806333af59891461035957806342842e0e1461038957806361728f39146103a5576101f0565b8063095ea7b3116101c3578063095ea7b314610291578063219c0eee146102ad57806322881f88146102dd57806323b872dd1461030d576101f0565b806301f920c6146101f557806301ffc9a71461021357806306fdde0314610243578063081812fc14610261575b600080fd5b6101fd6106c7565b60405161020a9190613ccf565b60405180910390f35b61022d600480360381019061022891906130cc565b6106cd565b60405161023a9190613989565b60405180910390f35b61024b6107af565b6040516102589190613a2d565b60405180910390f35b61027b6004803603810190610276919061315f565b610841565b60405161028891906138e4565b60405180910390f35b6102ab60048036038101906102a69190613002565b6108c6565b005b6102c760048036038101906102c29190613067565b6109de565b6040516102d491906138e4565b60405180910390f35b6102f760048036038101906102f29190613067565b610a11565b6040516103049190613ccf565b60405180910390f35b61032760048036038101906103229190612efc565b610a29565b005b610343600480360381019061033e919061311e565b610a89565b6040516103509190613a2d565b60405180910390f35b610373600480360381019061036e919061315f565b610b22565b6040516103809190613a2d565b60405180910390f35b6103a3600480360381019061039e9190612efc565b610d16565b005b6103ad610d36565b6040516103ba91906139a4565b60405180910390f35b6103dd60048036038101906103d8919061315f565b610d3c565b005b6103f960048036038101906103f4919061315f565b610eaa565b60405161040691906138e4565b60405180910390f35b6104296004803603810190610424919061315f565b610f5c565b6040516104369190613a2d565b60405180910390f35b61045960048036038101906104549190612e97565b61105e565b6040516104669190613ccf565b60405180910390f35b6104896004803603810190610484919061311e565b611116565b6040516104969190613a2d565b60405180910390f35b6104b960048036038101906104b49190613090565b611166565b005b6104c3611202565b6040516104d09190613ccf565b60405180910390f35b6104f360048036038101906104ee919061315f565b611208565b6040516105009190613a2d565b60405180910390f35b6105116112b4565b60405161051e9190613a2d565b60405180910390f35b610541600480360381019061053c919061315f565b611346565b60405161054e9190613ccf565b60405180910390f35b610571600480360381019061056c9190612fc6565b61135e565b005b61058d60048036038101906105889190612f4b565b611374565b005b6105a960048036038101906105a4919061315f565b6113d6565b6040516105b69190613a2d565b60405180910390f35b6105d960048036038101906105d4919061315f565b611589565b6040516105e69190613a2d565b60405180910390f35b6106096004803603810190610604919061315f565b611635565b6040516106169190613a2d565b60405180910390f35b610627611787565b6040516106349190613ccf565b60405180910390f35b61064561178d565b6040516106529190613ccf565b60405180910390f35b610663611793565b6040516106709190613ccf565b60405180910390f35b610693600480360381019061068e9190612ec0565b611799565b6040516106a09190613989565b60405180910390f35b6106b161182d565b6040516106be91906139a4565b60405180910390f35b600b5481565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061079857507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107a857506107a782611901565b5b9050919050565b6060600080546107be90613ff6565b80601f01602080910402602001604051908101604052809291908181526020018280546107ea90613ff6565b80156108375780601f1061080c57610100808354040283529160200191610837565b820191906000526020600020905b81548152906001019060200180831161081a57829003601f168201915b5050505050905090565b600061084c8261196b565b61088b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088290613bef565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108d182610eaa565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093990613c6f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109616119d7565b73ffffffffffffffffffffffffffffffffffffffff161480610990575061098f8161098a6119d7565b611799565b5b6109cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c690613b2f565b60405180910390fd5b6109d983836119df565b505050565b60106020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60116020528060005260406000206000915090505481565b610a3a610a346119d7565b82611a98565b610a79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7090613caf565b60405180910390fd5b610a84838383611b76565b505050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000610aef84604051602001610adb9190613744565b604051602081830303815290604052611ddd565b905060008282604051602001610b0692919061375b565b6040516020818303038152906040529050809350505050919050565b606060006001600c5484610b3691906140b6565b610b409190613ddd565b90506040518060400160405280600981526020017f3c7061746820643d270000000000000000000000000000000000000000000000815250915060005b81811015610c085760008482600d54610b969190613ddd565b604051602001610ba7929190613cea565b6040516020818303038152906040528051906020012060001c90506000610bcd826113d6565b90508481604051602001610be292919061375b565b604051602081830303815290604052945050508080610c0090614059565b915050610b7d565b506000600f808054905085610c1d91906140b6565b81548110610c54577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018054610c6990613ff6565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9590613ff6565b8015610ce25780601f10610cb757610100808354040283529160200191610ce2565b820191906000526020600020905b815481529060010190602001808311610cc557829003601f168201915b50505050509050828182604051602001610cfe9392919061377f565b60405160208183030381529060405292505050919050565b610d3183838360405180602001604052806000815250611374565b505050565b60085481565b6000610d4782611635565b5114610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90613aef565b60405180910390fd5b80600a5411610dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc390613c8f565b60405180910390fd5b6000601260008381526020019081526020016000205411610e22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1990613c0f565b60405180910390fd5b6000601260008381526020019081526020016000205490506000610e4582610f5c565b90506000610e5282610a89565b90506000610e5f82611116565b9050610e6b8582611f7c565b847fcb25abd690c2dce293e6237b33535facf92481a7036a95e95ff3977eeaa6668882604051610e9b9190613a2d565b60405180910390a25050505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4a90613b6f565b60405180910390fd5b80915050919050565b606060006002600b5484610f7091906140b6565b610f7a9190613ddd565b9050610f87600d54611ff0565b610f92600d54611ff0565b604051602001610fa392919061387d565b604051602081830303815290604052915060005b818110156110355760008482604051602001610fd4929190613cea565b6040516020818303038152906040528051906020012060001c90506000610ffa82610b22565b9050848160405160200161100f92919061375b565b60405160208183030381529060405294505050808061102d90614059565b915050610fb7565b50816040516020016110479190613818565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c690613b4f565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606111408260405160200161112c919061383a565b604051602081830303815290604052611ddd565b60405160200161115091906138c2565b6040516020818303038152906040529050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111eb90613c4f565b60405180910390fd5b6111fe82826121c5565b5050565b600d5481565b600e818154811061121857600080fd5b90600052602060002001600091509050805461123390613ff6565b80601f016020809104026020016040519081016040528092919081815260200182805461125f90613ff6565b80156112ac5780601f10611281576101008083540402835291602001916112ac565b820191906000526020600020905b81548152906001019060200180831161128f57829003601f168201915b505050505081565b6060600180546112c390613ff6565b80601f01602080910402602001604051908101604052809291908181526020018280546112ef90613ff6565b801561133c5780601f106113115761010080835404028352916020019161133c565b820191906000526020600020905b81548152906001019060200180831161131f57829003601f168201915b5050505050905090565b60126020528060005260406000206000915090505481565b6113706113696119d7565b8383612275565b5050565b61138561137f6119d7565b83611a98565b6113c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bb90613caf565b60405180910390fd5b6113d0848484846123e2565b50505050565b6060600e8080549050836113ea91906140b6565b81548110611421577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001805461143690613ff6565b80601f016020809104026020016040519081016040528092919081815260200182805461146290613ff6565b80156114af5780601f10611484576101008083540402835291602001916114af565b820191906000526020600020905b81548152906001019060200180831161149257829003601f168201915b505050505090506000600d54836002600d546114cb9190613e9b565b6040516020016114dc929190613cea565b6040516020818303038152906040528051906020012060001c6114ff91906140b6565b90506000600d54846003600d546115169190613e9b565b604051602001611527929190613cea565b6040516020818303038152906040528051906020012060001c61154a91906140b6565b90508261155683611ff0565b61155f83611ff0565b604051602001611571939291906137d1565b60405160208183030381529060405292505050919050565b600f818154811061159957600080fd5b9060005260206000200160009150905080546115b490613ff6565b80601f01602080910402602001604051908101604052809291908181526020018280546115e090613ff6565b801561162d5780601f106116025761010080835404028352916020019161162d565b820191906000526020600020905b81548152906001019060200180831161161057829003601f168201915b505050505081565b60606116408261196b565b61167f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167690613bcf565b60405180910390fd5b600060066000848152602001908152602001600020805461169f90613ff6565b80601f01602080910402602001604051908101604052809291908181526020018280546116cb90613ff6565b80156117185780601f106116ed57610100808354040283529160200191611718565b820191906000526020600020905b8154815290600101906020018083116116fb57829003601f168201915b50505050509050600061172961243e565b905060008151141561173f578192505050611782565b60008251111561177457808260405160200161175c92919061375b565b60405160208183030381529060405292505050611782565b61177d84612455565b925050505b919050565b600a5481565b60095481565b600c5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600061183d6008546009546124fc565b9050336010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a5490508060116000848152602001908152602001600020819055506001600a546118bf9190613ddd565b600a81905550817fd18cd6f82baac9078af064ea020dd3dc7bff649bd8d50684f972d5995fec6e69826040516118f59190613ccf565b60405180910390a25090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611a5283610eaa565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611aa38261196b565b611ae2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad990613b0f565b60405180910390fd5b6000611aed83610eaa565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611b5c57508373ffffffffffffffffffffffffffffffffffffffff16611b4484610841565b73ffffffffffffffffffffffffffffffffffffffff16145b80611b6d5750611b6c8185611799565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611b9682610eaa565b73ffffffffffffffffffffffffffffffffffffffff1614611bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be390613a6f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5390613aaf565b60405180910390fd5b611c6783838361265e565b611c726000826119df565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cc29190613ef5565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d199190613ddd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611dd8838383612663565b505050565b6060600082511415611e0057604051806020016040528060008152509050611f77565b60006040518060600160405280604081526020016149f76040913990506000600360028551611e2f9190613ddd565b611e399190613e6a565b6004611e459190613e9b565b90506000602082611e569190613ddd565b67ffffffffffffffff811115611e95577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611ec75781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015611f36576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050611edb565b600389510660018114611f505760028114611f6057611f6b565b613d3d60f01b6002830352611f6b565b603d60f81b60018303525b50505050508093505050505b919050565b611f858261196b565b611fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fbb90613b8f565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611feb929190612c91565b505050565b60606000821415612038576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506121c0565b600082905060005b6000821461206a57808061205390614059565b915050600a826120639190613e6a565b9150612040565b60008167ffffffffffffffff8111156120ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120de5781602001600182028036833780820191505090505b50905060008290505b600086146121b8576001816120fc9190613ef5565b90506000600a808861210e9190613e6a565b6121189190613e9b565b876121239190613ef5565b603061212f9190613e33565b905060008160f81b905080848481518110612173577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886121af9190613e6a565b975050506120e7565b819450505050505b919050565b60006010600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006011600085815260200190815260200160002054905061221f8282612668565b826012600083815260200190815260200160002081905550807faad5362ce528ed941024b95d4c18dfd49b8503e1f586a5c353631d98c2af41b7846040516122679190613ccf565b60405180910390a250505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156122e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122db90613acf565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516123d59190613989565b60405180910390a3505050565b6123ed848484611b76565b6123f984848484612686565b612438576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242f90613a4f565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606124608261196b565b61249f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161249690613c2f565b60405180910390fd5b60006124a961243e565b905060008151116124c957604051806020016040528060008152506124f4565b806124d38461281d565b6040516020016124e492919061375b565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016125709291906139bf565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161259d9392919061394b565b602060405180830381600087803b1580156125b757600080fd5b505af11580156125cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ef919061303e565b5060006126128460003060076000898152602001908152602001600020546129ca565b9050600160076000868152602001908152602001600020546126349190613ddd565b60076000868152602001908152602001600020819055506126558482612a06565b91505092915050565b505050565b505050565b612682828260405180602001604052806000815250612a39565b5050565b60006126a78473ffffffffffffffffffffffffffffffffffffffff16612a94565b15612810578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026126d06119d7565b8786866040518563ffffffff1660e01b81526004016126f294939291906138ff565b602060405180830381600087803b15801561270c57600080fd5b505af192505050801561273d57506040513d601f19601f8201168201806040525081019061273a91906130f5565b60015b6127c0573d806000811461276d576040519150601f19603f3d011682016040523d82523d6000602084013e612772565b606091505b506000815114156127b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127af90613a4f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612815565b600190505b949350505050565b60606000821415612865576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506129c5565b600082905060005b6000821461289757808061288090614059565b915050600a826128909190613e6a565b915061286d565b60008167ffffffffffffffff8111156128d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561290b5781602001600182028036833780820191505090505b5090505b600085146129be576001826129249190613ef5565b9150600a8561293391906140b6565b603061293f9190613ddd565b60f81b81838151811061297b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856129b79190613e6a565b945061290f565b8093505050505b919050565b6000848484846040516020016129e394939291906139e8565b6040516020818303038152906040528051906020012060001c9050949350505050565b60008282604051602001612a1b929190613718565b60405160208183030381529060405280519060200120905092915050565b612a438383612ab7565b612a506000848484612686565b612a8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8690613a4f565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1e90613baf565b60405180910390fd5b612b308161196b565b15612b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b6790613a8f565b60405180910390fd5b612b7c6000838361265e565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bcc9190613ddd565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612c8d60008383612663565b5050565b828054612c9d90613ff6565b90600052602060002090601f016020900481019282612cbf5760008555612d06565b82601f10612cd857805160ff1916838001178555612d06565b82800160010185558215612d06579182015b82811115612d05578251825591602001919060010190612cea565b5b509050612d139190612d17565b5090565b5b80821115612d30576000816000905550600101612d18565b5090565b6000612d47612d4284613d38565b613d13565b905082815260208101848484011115612d5f57600080fd5b612d6a848285613fb4565b509392505050565b6000612d85612d8084613d69565b613d13565b905082815260208101848484011115612d9d57600080fd5b612da8848285613fb4565b509392505050565b600081359050612dbf81614983565b92915050565b600081359050612dd48161499a565b92915050565b600081519050612de98161499a565b92915050565b600081359050612dfe816149b1565b92915050565b600081359050612e13816149c8565b92915050565b600081519050612e28816149c8565b92915050565b600082601f830112612e3f57600080fd5b8135612e4f848260208601612d34565b91505092915050565b600082601f830112612e6957600080fd5b8135612e79848260208601612d72565b91505092915050565b600081359050612e91816149df565b92915050565b600060208284031215612ea957600080fd5b6000612eb784828501612db0565b91505092915050565b60008060408385031215612ed357600080fd5b6000612ee185828601612db0565b9250506020612ef285828601612db0565b9150509250929050565b600080600060608486031215612f1157600080fd5b6000612f1f86828701612db0565b9350506020612f3086828701612db0565b9250506040612f4186828701612e82565b9150509250925092565b60008060008060808587031215612f6157600080fd5b6000612f6f87828801612db0565b9450506020612f8087828801612db0565b9350506040612f9187828801612e82565b925050606085013567ffffffffffffffff811115612fae57600080fd5b612fba87828801612e2e565b91505092959194509250565b60008060408385031215612fd957600080fd5b6000612fe785828601612db0565b9250506020612ff885828601612dc5565b9150509250929050565b6000806040838503121561301557600080fd5b600061302385828601612db0565b925050602061303485828601612e82565b9150509250929050565b60006020828403121561305057600080fd5b600061305e84828501612dda565b91505092915050565b60006020828403121561307957600080fd5b600061308784828501612def565b91505092915050565b600080604083850312156130a357600080fd5b60006130b185828601612def565b92505060206130c285828601612e82565b9150509250929050565b6000602082840312156130de57600080fd5b60006130ec84828501612e04565b91505092915050565b60006020828403121561310757600080fd5b600061311584828501612e19565b91505092915050565b60006020828403121561313057600080fd5b600082013567ffffffffffffffff81111561314a57600080fd5b61315684828501612e58565b91505092915050565b60006020828403121561317157600080fd5b600061317f84828501612e82565b91505092915050565b61319181613f29565b82525050565b6131a081613f3b565b82525050565b6131af81613f47565b82525050565b6131c66131c182613f47565b6140a2565b82525050565b60006131d782613d9a565b6131e18185613db0565b93506131f1818560208601613fc3565b6131fa816141a3565b840191505092915050565b600061321082613da5565b61321a8185613dc1565b935061322a818560208601613fc3565b613233816141a3565b840191505092915050565b600061324982613da5565b6132538185613dd2565b9350613263818560208601613fc3565b80840191505092915050565b600061327c600983613dd2565b9150613287826141b4565b600982019050919050565b600061329f603283613dc1565b91506132aa826141dd565b604082019050919050565b60006132c2602583613dc1565b91506132cd8261422c565b604082019050919050565b60006132e5601c83613dc1565b91506132f08261427b565b602082019050919050565b6000613308600883613dd2565b9150613313826142a4565b600882019050919050565b600061332b600a83613dd2565b9150613336826142cd565b600a82019050919050565b600061334e602483613dc1565b9150613359826142f6565b604082019050919050565b6000613371601983613dc1565b915061337c82614345565b602082019050919050565b6000613394601783613dc1565b915061339f8261436e565b602082019050919050565b60006133b7602c83613dc1565b91506133c282614397565b604082019050919050565b60006133da600183613dd2565b91506133e5826143e6565b600182019050919050565b60006133fd600383613dd2565b91506134088261440f565b600382019050919050565b6000613420600783613dd2565b915061342b82614438565b600782019050919050565b6000613443603883613dc1565b915061344e82614461565b604082019050919050565b6000613466602a83613dc1565b9150613471826144b0565b604082019050919050565b6000613489602983613dc1565b9150613494826144ff565b604082019050919050565b60006134ac602e83613dc1565b91506134b78261454e565b604082019050919050565b60006134cf600283613dd2565b91506134da8261459d565b600282019050919050565b60006134f2602083613dc1565b91506134fd826145c6565b602082019050919050565b6000613515603183613dc1565b9150613520826145ef565b604082019050919050565b6000613538602c83613dc1565b91506135438261463e565b604082019050919050565b600061355b602783613dc1565b91506135668261468d565b604082019050919050565b600061357e603083613dd2565b9150613589826146dc565b603082019050919050565b60006135a1602f83613dc1565b91506135ac8261472b565b604082019050919050565b60006135c4601f83613dc1565b91506135cf8261477a565b602082019050919050565b60006135e7604283613dd2565b91506135f2826147a3565b604282019050919050565b600061360a602183613dc1565b915061361582614818565b604082019050919050565b600061362d601d83613dd2565b915061363882614867565b601d82019050919050565b6000613650601f83613dc1565b915061365b82614890565b602082019050919050565b6000613673603183613dc1565b915061367e826148b9565b604082019050919050565b6000613696600283613dd2565b91506136a182614908565b600282019050919050565b60006136b9600683613dd2565b91506136c482614931565b600682019050919050565b60006136dc600983613dd2565b91506136e78261495a565b600982019050919050565b6136fb81613f9d565b82525050565b61371261370d82613f9d565b6140ac565b82525050565b600061372482856131b5565b6020820191506137348284613701565b6020820191508190509392505050565b6000613750828461323e565b915081905092915050565b6000613767828561323e565b9150613773828461323e565b91508190509392505050565b600061378b828661323e565b9150613796826132fb565b91506137a2828561323e565b91506137ad8261331e565b91506137b9828461323e565b91506137c4826133f0565b9150819050949350505050565b60006137dd828661323e565b91506137e8826133cd565b91506137f4828561323e565b91506137ff826133cd565b915061380b828461323e565b9150819050949350505050565b6000613824828461323e565b915061382f826136ac565b915081905092915050565b60006138458261326f565b915061385082613413565b915061385b826135da565b9150613867828461323e565b9150613872826134c2565b915081905092915050565b600061388882613571565b9150613894828561323e565b915061389f826136cf565b91506138ab828461323e565b91506138b682613689565b91508190509392505050565b60006138cd82613620565b91506138d9828461323e565b915081905092915050565b60006020820190506138f96000830184613188565b92915050565b60006080820190506139146000830187613188565b6139216020830186613188565b61392e60408301856136f2565b818103606083015261394081846131cc565b905095945050505050565b60006060820190506139606000830186613188565b61396d60208301856136f2565b818103604083015261397f81846131cc565b9050949350505050565b600060208201905061399e6000830184613197565b92915050565b60006020820190506139b960008301846131a6565b92915050565b60006040820190506139d460008301856131a6565b6139e160208301846136f2565b9392505050565b60006080820190506139fd60008301876131a6565b613a0a60208301866136f2565b613a176040830185613188565b613a2460608301846136f2565b95945050505050565b60006020820190508181036000830152613a478184613205565b905092915050565b60006020820190508181036000830152613a6881613292565b9050919050565b60006020820190508181036000830152613a88816132b5565b9050919050565b60006020820190508181036000830152613aa8816132d8565b9050919050565b60006020820190508181036000830152613ac881613341565b9050919050565b60006020820190508181036000830152613ae881613364565b9050919050565b60006020820190508181036000830152613b0881613387565b9050919050565b60006020820190508181036000830152613b28816133aa565b9050919050565b60006020820190508181036000830152613b4881613436565b9050919050565b60006020820190508181036000830152613b6881613459565b9050919050565b60006020820190508181036000830152613b888161347c565b9050919050565b60006020820190508181036000830152613ba88161349f565b9050919050565b60006020820190508181036000830152613bc8816134e5565b9050919050565b60006020820190508181036000830152613be881613508565b9050919050565b60006020820190508181036000830152613c088161352b565b9050919050565b60006020820190508181036000830152613c288161354e565b9050919050565b60006020820190508181036000830152613c4881613594565b9050919050565b60006020820190508181036000830152613c68816135b7565b9050919050565b60006020820190508181036000830152613c88816135fd565b9050919050565b60006020820190508181036000830152613ca881613643565b9050919050565b60006020820190508181036000830152613cc881613666565b9050919050565b6000602082019050613ce460008301846136f2565b92915050565b6000604082019050613cff60008301856136f2565b613d0c60208301846136f2565b9392505050565b6000613d1d613d2e565b9050613d298282614028565b919050565b6000604051905090565b600067ffffffffffffffff821115613d5357613d52614174565b5b613d5c826141a3565b9050602081019050919050565b600067ffffffffffffffff821115613d8457613d83614174565b5b613d8d826141a3565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613de882613f9d565b9150613df383613f9d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613e2857613e276140e7565b5b828201905092915050565b6000613e3e82613fa7565b9150613e4983613fa7565b92508260ff03821115613e5f57613e5e6140e7565b5b828201905092915050565b6000613e7582613f9d565b9150613e8083613f9d565b925082613e9057613e8f614116565b5b828204905092915050565b6000613ea682613f9d565b9150613eb183613f9d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613eea57613ee96140e7565b5b828202905092915050565b6000613f0082613f9d565b9150613f0b83613f9d565b925082821015613f1e57613f1d6140e7565b5b828203905092915050565b6000613f3482613f7d565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613fe1578082015181840152602081019050613fc6565b83811115613ff0576000848401525b50505050565b6000600282049050600182168061400e57607f821691505b6020821081141561402257614021614145565b5b50919050565b614031826141a3565b810181811067ffffffffffffffff821117156140505761404f614174565b5b80604052505050565b600061406482613f9d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614097576140966140e7565b5b600182019050919050565b6000819050919050565b6000819050919050565b60006140c182613f9d565b91506140cc83613f9d565b9250826140dc576140db614116565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f272066696c6c3d27000000000000000000000000000000000000000000000000600082015250565b7f27207374726f6b653d2700000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f746f6b656e55524920697320616c726561647920736574000000000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b7f272f3e0000000000000000000000000000000000000000000000000000000000600082015250565b7f535647204e465400000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f52616e646f6d206e756d626572206e6f7420796574207265636965766564206660008201527f726f6d2056524600000000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766727206865696768743d2700000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f222c20226465736372697074696f6e223a22416e204e4654206261736564206f60008201527f6e20535647222c202261747472696275746573223a22222c2022696d6167652260208201527f3a22000000000000000000000000000000000000000000000000000000000000604082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b7f746f6b656e496420686173206e6f7420796574206265656e206d696e74656400600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f273e000000000000000000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f272077696474683d270000000000000000000000000000000000000000000000600082015250565b61498c81613f29565b811461499757600080fd5b50565b6149a381613f3b565b81146149ae57600080fd5b50565b6149ba81613f47565b81146149c557600080fd5b50565b6149d181613f51565b81146149dc57600080fd5b50565b6149e881613f9d565b81146149f357600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212207b9932a6f8390cc87a48519b038a324c8f3cc1563caae300025447714299ce8664736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 291,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 293,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 297,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 301,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 305,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 311,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1278,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 79,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2102,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "keyHash",
        "offset": 0,
        "slot": "8",
        "type": "t_bytes32"
      },
      {
        "astId": 2104,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "fee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2106,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2108,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "maxPaths",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2110,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "maxPathCommands",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2112,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "size",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2115,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "pathCommands",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2118,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "colours",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2122,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "requestIdToSender",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2126,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "requestIdToTokenId",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2130,
        "contract": "contracts/RandomSVGNFT.sol:RandomSVGNFT",
        "label": "tokenIdToRandomNumber",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}